/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.dynamics.customerinsights.apiclient.models;

import java.util.List;
import java.util.UUID;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The GraphNodeInfo model.
 */
public class GraphNodeInfo {
    /**
     * Possible values include: 'none', 'ingestion', 'derivedEntity',
     * 'hierarchy', 'dataPreparation', 'map', 'realtimeM3Search', 'match',
     * 'merge', 'profileStore', 'search', 'activity', 'contact',
     * 'attributeMeasures', 'entityMeasures', 'measures', 'segmentation',
     * 'segmentMembership', 'enrichment', 'preEnrichment', 'transform',
     * 'intelligence', 'aiBuilder', 'insights', 'export', 'modelManagement',
     * 'relationship', 'roleAssignment', 'analysis', 'semanticEntity', 'all'.
     */
    @JsonProperty(value = "operationType")
    private String operationType;

    /**
     * Possible values include: 'noSubType', 'templatedMeasures',
     * 'createAnalysisModel', 'linkAnalysisModel', 'singleActivityMapping',
     * 'powerPlatform'.
     */
    @JsonProperty(value = "subType")
    private String subType;

    /**
     * The identifier property.
     */
    @JsonProperty(value = "identifier")
    private String identifier;

    /**
     * The friendlyName property.
     */
    @JsonProperty(value = "friendlyName")
    private String friendlyName;

    /**
     * The jobIds property.
     */
    @JsonProperty(value = "jobIds")
    private List<UUID> jobIds;

    /**
     * Possible values include: 'queued', 'needsUpdate', 'running', 'failed',
     * 'timedOut', 'aborted', 'deleted', 'successful', 'skipped'.
     */
    @JsonProperty(value = "taskStatus")
    private String taskStatus;

    /**
     * The lastSuccessJobIds property.
     */
    @JsonProperty(value = "lastSuccessJobIds")
    private List<UUID> lastSuccessJobIds;

    /**
     * The endTimestamp property.
     */
    @JsonProperty(value = "endTimestamp")
    private DateTime endTimestamp;

    /**
     * The lastSuccessfulTimestamp property.
     */
    @JsonProperty(value = "lastSuccessfulTimestamp")
    private DateTime lastSuccessfulTimestamp;

    /**
     * The ciError property.
     */
    @JsonProperty(value = "ciError")
    private CIResult ciError;

    /**
     * The ciErrors property.
     */
    @JsonProperty(value = "ciErrors")
    private List<CIResult> ciErrors;

    /**
     * The additionalInfo property.
     */
    @JsonProperty(value = "additionalInfo")
    private CustomTaskInformation additionalInfo;

    /**
     * The selectionReason property.
     */
    @JsonProperty(value = "selectionReason")
    private SelectionReason selectionReason;

    /**
     * Get possible values include: 'none', 'ingestion', 'derivedEntity', 'hierarchy', 'dataPreparation', 'map', 'realtimeM3Search', 'match', 'merge', 'profileStore', 'search', 'activity', 'contact', 'attributeMeasures', 'entityMeasures', 'measures', 'segmentation', 'segmentMembership', 'enrichment', 'preEnrichment', 'transform', 'intelligence', 'aiBuilder', 'insights', 'export', 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'semanticEntity', 'all'.
     *
     * @return the operationType value
     */
    public String operationType() {
        return this.operationType;
    }

    /**
     * Set possible values include: 'none', 'ingestion', 'derivedEntity', 'hierarchy', 'dataPreparation', 'map', 'realtimeM3Search', 'match', 'merge', 'profileStore', 'search', 'activity', 'contact', 'attributeMeasures', 'entityMeasures', 'measures', 'segmentation', 'segmentMembership', 'enrichment', 'preEnrichment', 'transform', 'intelligence', 'aiBuilder', 'insights', 'export', 'modelManagement', 'relationship', 'roleAssignment', 'analysis', 'semanticEntity', 'all'.
     *
     * @param operationType the operationType value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withOperationType(String operationType) {
        this.operationType = operationType;
        return this;
    }

    /**
     * Get possible values include: 'noSubType', 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel', 'singleActivityMapping', 'powerPlatform'.
     *
     * @return the subType value
     */
    public String subType() {
        return this.subType;
    }

    /**
     * Set possible values include: 'noSubType', 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel', 'singleActivityMapping', 'powerPlatform'.
     *
     * @param subType the subType value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withSubType(String subType) {
        this.subType = subType;
        return this;
    }

    /**
     * Get the identifier value.
     *
     * @return the identifier value
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Set the identifier value.
     *
     * @param identifier the identifier value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get the friendlyName value.
     *
     * @return the friendlyName value
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName value.
     *
     * @param friendlyName the friendlyName value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the jobIds value.
     *
     * @return the jobIds value
     */
    public List<UUID> jobIds() {
        return this.jobIds;
    }

    /**
     * Set the jobIds value.
     *
     * @param jobIds the jobIds value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withJobIds(List<UUID> jobIds) {
        this.jobIds = jobIds;
        return this;
    }

    /**
     * Get possible values include: 'queued', 'needsUpdate', 'running', 'failed', 'timedOut', 'aborted', 'deleted', 'successful', 'skipped'.
     *
     * @return the taskStatus value
     */
    public String taskStatus() {
        return this.taskStatus;
    }

    /**
     * Set possible values include: 'queued', 'needsUpdate', 'running', 'failed', 'timedOut', 'aborted', 'deleted', 'successful', 'skipped'.
     *
     * @param taskStatus the taskStatus value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withTaskStatus(String taskStatus) {
        this.taskStatus = taskStatus;
        return this;
    }

    /**
     * Get the lastSuccessJobIds value.
     *
     * @return the lastSuccessJobIds value
     */
    public List<UUID> lastSuccessJobIds() {
        return this.lastSuccessJobIds;
    }

    /**
     * Set the lastSuccessJobIds value.
     *
     * @param lastSuccessJobIds the lastSuccessJobIds value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withLastSuccessJobIds(List<UUID> lastSuccessJobIds) {
        this.lastSuccessJobIds = lastSuccessJobIds;
        return this;
    }

    /**
     * Get the endTimestamp value.
     *
     * @return the endTimestamp value
     */
    public DateTime endTimestamp() {
        return this.endTimestamp;
    }

    /**
     * Set the endTimestamp value.
     *
     * @param endTimestamp the endTimestamp value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withEndTimestamp(DateTime endTimestamp) {
        this.endTimestamp = endTimestamp;
        return this;
    }

    /**
     * Get the lastSuccessfulTimestamp value.
     *
     * @return the lastSuccessfulTimestamp value
     */
    public DateTime lastSuccessfulTimestamp() {
        return this.lastSuccessfulTimestamp;
    }

    /**
     * Set the lastSuccessfulTimestamp value.
     *
     * @param lastSuccessfulTimestamp the lastSuccessfulTimestamp value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withLastSuccessfulTimestamp(DateTime lastSuccessfulTimestamp) {
        this.lastSuccessfulTimestamp = lastSuccessfulTimestamp;
        return this;
    }

    /**
     * Get the ciError value.
     *
     * @return the ciError value
     */
    public CIResult ciError() {
        return this.ciError;
    }

    /**
     * Set the ciError value.
     *
     * @param ciError the ciError value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withCiError(CIResult ciError) {
        this.ciError = ciError;
        return this;
    }

    /**
     * Get the ciErrors value.
     *
     * @return the ciErrors value
     */
    public List<CIResult> ciErrors() {
        return this.ciErrors;
    }

    /**
     * Set the ciErrors value.
     *
     * @param ciErrors the ciErrors value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withCiErrors(List<CIResult> ciErrors) {
        this.ciErrors = ciErrors;
        return this;
    }

    /**
     * Get the additionalInfo value.
     *
     * @return the additionalInfo value
     */
    public CustomTaskInformation additionalInfo() {
        return this.additionalInfo;
    }

    /**
     * Set the additionalInfo value.
     *
     * @param additionalInfo the additionalInfo value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withAdditionalInfo(CustomTaskInformation additionalInfo) {
        this.additionalInfo = additionalInfo;
        return this;
    }

    /**
     * Get the selectionReason value.
     *
     * @return the selectionReason value
     */
    public SelectionReason selectionReason() {
        return this.selectionReason;
    }

    /**
     * Set the selectionReason value.
     *
     * @param selectionReason the selectionReason value to set
     * @return the GraphNodeInfo object itself.
     */
    public GraphNodeInfo withSelectionReason(SelectionReason selectionReason) {
        this.selectionReason = selectionReason;
        return this;
    }

}
