/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.dynamics.customerinsights.apiclient.models;

import java.util.UUID;
import java.util.List;
import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents Entity Metadata.
 */
public class IEntityMetadata {
    /**
     * Gets the name of the entity. eg: Contact.
     */
    @JsonProperty(value = "name")
    private String name;

    /**
     * Gets the unqiue logical name for the entity
     * If entity is from a datasource, QualifiedEntityName =
     * datasourceId_EntityName eg:
     * d8d3b26a-a8ad-42f7-901e-f7f745003a84_Contact.
     * If entity is generated by C360, QualifiedEntityName = EntityName eg:
     * Contact.
     */
    @JsonProperty(value = "qualifiedEntityName")
    private String qualifiedEntityName;

    /**
     * Gets the datasource name of this entity, if no data source, return null
     * or emptyString.
     */
    @JsonProperty(value = "dataSourceName")
    private String dataSourceName;

    /**
     * Possible values include: 'dynamics365', 'salesforce',
     * 'conflationSortAndRefine', 'conflationDeduplication',
     * 'conflationMatchPairs', 'conflationResolveConflicts', 'enriched', 'kpi',
     * 'powerQuery', 'dataPreparation', 'intelligence', 'unifiedActivity',
     * 'segmentation', 'ingestion', 'attachCdm', 'genericPrediction',
     * 'attachCds', 'unknown', 'powerPlatform', 'datahub', 'insights',
     * 'derivedEntity', 'powerPlatformSource', 'powerPlatformBYDL',
     * 'powerPlatformBYDLSource', 'semanticActivity', 'segmentMembership',
     * 'firstParty', 'hierarchy', 'contact', 'semanticEntity', 'attachSynapse',
     * 'transform'.
     */
    @JsonProperty(value = "dataflowType")
    private String dataflowType;

    /**
     * Gets a value indicating whether Sas Auth is used for the entity.
     */
    @JsonProperty(value = "shouldUseSparkSasAuth")
    private Boolean shouldUseSparkSasAuth;

    /**
     * Gets the original datasourceid of this entity, if no data source, return
     * null or emptyString.
     */
    @JsonProperty(value = "datasourceId")
    private UUID datasourceId;

    /**
     * Possible values include: 'unspecified', 'profile', 'conflationMap',
     * 'activity', 'aggregateKpi', 'profileKpi', 'unifiedActivity', 'segment',
     * 'intelligence', 'genericPrediction', 'enrichment', 'insights',
     * 'derivedEntity', 'corrupt', 'selfConflation', 'conflationManualReview',
     * 'selfConflationManualReview', 'semanticActivity', 'segmentMembership',
     * 'hierarchy', 'dataLineage', 'transform', 'semanticEntity'.
     */
    @JsonProperty(value = "entityType")
    private String entityType;

    /**
     * Gets entity attributes.
     */
    @JsonProperty(value = "attributes")
    private List<IAttributeMetadata> attributes;

    /**
     * Gets the keys of the entity.
     */
    @JsonProperty(value = "keys")
    private List<List<IAttributeMetadata>> keys;

    /**
     * Gets entity relationships.
     */
    @JsonProperty(value = "relationships")
    private List<IRelationshipMetadata> relationships;

    /**
     * The timestampAttribute property.
     */
    @JsonProperty(value = "timestampAttribute")
    private IAttributeMetadata timestampAttribute;

    /**
     * The incrementalAttribute property.
     */
    @JsonProperty(value = "incrementalAttribute")
    private IAttributeMetadata incrementalAttribute;

    /**
     * Possible values include: 'Account', 'AccountLeads', 'ActivityParty',
     * 'ActivityPointer', 'Annotation', 'Appointment', 'BusinessUnit',
     * 'Campaign', 'CampaignActivity', 'CampaignItem', 'CampaignResponse',
     * 'Characteristic', 'Competitor', 'CompetitorAddress',
     * 'CompetitorProduct', 'Connection', 'ConnectionRole', 'Contact',
     * 'Contract', 'ContractDetail', 'Customer', 'CustomerAddress',
     * 'CustomerRelationship', 'Discount', 'DiscountType', 'Email',
     * 'Entitlement', 'Equipment', 'Fax', 'Feedback', 'Goal', 'Incident',
     * 'Invoice', 'InvoiceDetail', 'KbArticle', 'KnowledgeArticle', 'Lead',
     * 'LeadAddress', 'Letter', 'Metric', 'Opportunity', 'Organization',
     * 'Owner', 'PhoneCall', 'Position', 'PriceLevel', 'Product', 'Quote',
     * 'RatingModel', 'Resource', 'ResourceGroup', 'SalesLiterature',
     * 'SalesOrder', 'Service', 'ServiceAppointment', 'Site', 'SLA',
     * 'SocialActivity', 'SocialProfile', 'SystemUser', 'Task', 'Team',
     * 'Territory', 'UoM'.
     */
    @JsonProperty(value = "semanticType")
    private String semanticType;

    /**
     * Gets last refresh time for entity.
     */
    @JsonProperty(value = "refreshTime")
    private DateTime refreshTime;

    /**
     * Gets entity data partitions.
     */
    @JsonProperty(value = "partitions")
    private List<PartitionMetadata> partitions;

    /**
     * Gets entity incremental upsert data partitions.
     */
    @JsonProperty(value = "incrementalUpsertPartitions")
    private List<PartitionMetadata> incrementalUpsertPartitions;

    /**
     * Gets entity incremental delete data partitions.
     */
    @JsonProperty(value = "incrementalDeletePartitions")
    private List<PartitionMetadata> incrementalDeletePartitions;

    /**
     * Gets entity data parquet partitions.
     */
    @JsonProperty(value = "fullPartitionsParquet")
    private List<PartitionMetadata> fullPartitionsParquet;

    /**
     * Gets entity incremental upsert data parquet partitions.
     */
    @JsonProperty(value = "incrementalUpsertPartitionsParquet")
    private List<PartitionMetadata> incrementalUpsertPartitionsParquet;

    /**
     * Gets entity incremental delete data parquet partitions.
     */
    @JsonProperty(value = "incrementalDeletePartitionsParquet")
    private List<PartitionMetadata> incrementalDeletePartitionsParquet;

    /**
     * Gets base entity name.
     */
    @JsonProperty(value = "annotations")
    private List<Annotation> annotations;

    /**
     * Get gets the name of the entity. eg: Contact.
     *
     * @return the name value
     */
    public String name() {
        return this.name;
    }

    /**
     * Set gets the name of the entity. eg: Contact.
     *
     * @param name the name value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get gets the unqiue logical name for the entity
     If entity is from a datasource, QualifiedEntityName = datasourceId_EntityName eg: d8d3b26a-a8ad-42f7-901e-f7f745003a84_Contact.
     If entity is generated by C360, QualifiedEntityName = EntityName eg: Contact.
     *
     * @return the qualifiedEntityName value
     */
    public String qualifiedEntityName() {
        return this.qualifiedEntityName;
    }

    /**
     * Set gets the unqiue logical name for the entity
     If entity is from a datasource, QualifiedEntityName = datasourceId_EntityName eg: d8d3b26a-a8ad-42f7-901e-f7f745003a84_Contact.
     If entity is generated by C360, QualifiedEntityName = EntityName eg: Contact.
     *
     * @param qualifiedEntityName the qualifiedEntityName value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withQualifiedEntityName(String qualifiedEntityName) {
        this.qualifiedEntityName = qualifiedEntityName;
        return this;
    }

    /**
     * Get gets the datasource name of this entity, if no data source, return null or emptyString.
     *
     * @return the dataSourceName value
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Set gets the datasource name of this entity, if no data source, return null or emptyString.
     *
     * @param dataSourceName the dataSourceName value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }

    /**
     * Get possible values include: 'dynamics365', 'salesforce', 'conflationSortAndRefine', 'conflationDeduplication', 'conflationMatchPairs', 'conflationResolveConflicts', 'enriched', 'kpi', 'powerQuery', 'dataPreparation', 'intelligence', 'unifiedActivity', 'segmentation', 'ingestion', 'attachCdm', 'genericPrediction', 'attachCds', 'unknown', 'powerPlatform', 'datahub', 'insights', 'derivedEntity', 'powerPlatformSource', 'powerPlatformBYDL', 'powerPlatformBYDLSource', 'semanticActivity', 'segmentMembership', 'firstParty', 'hierarchy', 'contact', 'semanticEntity', 'attachSynapse', 'transform'.
     *
     * @return the dataflowType value
     */
    public String dataflowType() {
        return this.dataflowType;
    }

    /**
     * Set possible values include: 'dynamics365', 'salesforce', 'conflationSortAndRefine', 'conflationDeduplication', 'conflationMatchPairs', 'conflationResolveConflicts', 'enriched', 'kpi', 'powerQuery', 'dataPreparation', 'intelligence', 'unifiedActivity', 'segmentation', 'ingestion', 'attachCdm', 'genericPrediction', 'attachCds', 'unknown', 'powerPlatform', 'datahub', 'insights', 'derivedEntity', 'powerPlatformSource', 'powerPlatformBYDL', 'powerPlatformBYDLSource', 'semanticActivity', 'segmentMembership', 'firstParty', 'hierarchy', 'contact', 'semanticEntity', 'attachSynapse', 'transform'.
     *
     * @param dataflowType the dataflowType value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withDataflowType(String dataflowType) {
        this.dataflowType = dataflowType;
        return this;
    }

    /**
     * Get gets a value indicating whether Sas Auth is used for the entity.
     *
     * @return the shouldUseSparkSasAuth value
     */
    public Boolean shouldUseSparkSasAuth() {
        return this.shouldUseSparkSasAuth;
    }

    /**
     * Set gets a value indicating whether Sas Auth is used for the entity.
     *
     * @param shouldUseSparkSasAuth the shouldUseSparkSasAuth value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withShouldUseSparkSasAuth(Boolean shouldUseSparkSasAuth) {
        this.shouldUseSparkSasAuth = shouldUseSparkSasAuth;
        return this;
    }

    /**
     * Get gets the original datasourceid of this entity, if no data source, return null or emptyString.
     *
     * @return the datasourceId value
     */
    public UUID datasourceId() {
        return this.datasourceId;
    }

    /**
     * Set gets the original datasourceid of this entity, if no data source, return null or emptyString.
     *
     * @param datasourceId the datasourceId value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withDatasourceId(UUID datasourceId) {
        this.datasourceId = datasourceId;
        return this;
    }

    /**
     * Get possible values include: 'unspecified', 'profile', 'conflationMap', 'activity', 'aggregateKpi', 'profileKpi', 'unifiedActivity', 'segment', 'intelligence', 'genericPrediction', 'enrichment', 'insights', 'derivedEntity', 'corrupt', 'selfConflation', 'conflationManualReview', 'selfConflationManualReview', 'semanticActivity', 'segmentMembership', 'hierarchy', 'dataLineage', 'transform', 'semanticEntity'.
     *
     * @return the entityType value
     */
    public String entityType() {
        return this.entityType;
    }

    /**
     * Set possible values include: 'unspecified', 'profile', 'conflationMap', 'activity', 'aggregateKpi', 'profileKpi', 'unifiedActivity', 'segment', 'intelligence', 'genericPrediction', 'enrichment', 'insights', 'derivedEntity', 'corrupt', 'selfConflation', 'conflationManualReview', 'selfConflationManualReview', 'semanticActivity', 'segmentMembership', 'hierarchy', 'dataLineage', 'transform', 'semanticEntity'.
     *
     * @param entityType the entityType value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withEntityType(String entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get gets entity attributes.
     *
     * @return the attributes value
     */
    public List<IAttributeMetadata> attributes() {
        return this.attributes;
    }

    /**
     * Set gets entity attributes.
     *
     * @param attributes the attributes value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withAttributes(List<IAttributeMetadata> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get gets the keys of the entity.
     *
     * @return the keys value
     */
    public List<List<IAttributeMetadata>> keys() {
        return this.keys;
    }

    /**
     * Set gets the keys of the entity.
     *
     * @param keys the keys value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withKeys(List<List<IAttributeMetadata>> keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Get gets entity relationships.
     *
     * @return the relationships value
     */
    public List<IRelationshipMetadata> relationships() {
        return this.relationships;
    }

    /**
     * Set gets entity relationships.
     *
     * @param relationships the relationships value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withRelationships(List<IRelationshipMetadata> relationships) {
        this.relationships = relationships;
        return this;
    }

    /**
     * Get the timestampAttribute value.
     *
     * @return the timestampAttribute value
     */
    public IAttributeMetadata timestampAttribute() {
        return this.timestampAttribute;
    }

    /**
     * Set the timestampAttribute value.
     *
     * @param timestampAttribute the timestampAttribute value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withTimestampAttribute(IAttributeMetadata timestampAttribute) {
        this.timestampAttribute = timestampAttribute;
        return this;
    }

    /**
     * Get the incrementalAttribute value.
     *
     * @return the incrementalAttribute value
     */
    public IAttributeMetadata incrementalAttribute() {
        return this.incrementalAttribute;
    }

    /**
     * Set the incrementalAttribute value.
     *
     * @param incrementalAttribute the incrementalAttribute value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withIncrementalAttribute(IAttributeMetadata incrementalAttribute) {
        this.incrementalAttribute = incrementalAttribute;
        return this;
    }

    /**
     * Get possible values include: 'Account', 'AccountLeads', 'ActivityParty', 'ActivityPointer', 'Annotation', 'Appointment', 'BusinessUnit', 'Campaign', 'CampaignActivity', 'CampaignItem', 'CampaignResponse', 'Characteristic', 'Competitor', 'CompetitorAddress', 'CompetitorProduct', 'Connection', 'ConnectionRole', 'Contact', 'Contract', 'ContractDetail', 'Customer', 'CustomerAddress', 'CustomerRelationship', 'Discount', 'DiscountType', 'Email', 'Entitlement', 'Equipment', 'Fax', 'Feedback', 'Goal', 'Incident', 'Invoice', 'InvoiceDetail', 'KbArticle', 'KnowledgeArticle', 'Lead', 'LeadAddress', 'Letter', 'Metric', 'Opportunity', 'Organization', 'Owner', 'PhoneCall', 'Position', 'PriceLevel', 'Product', 'Quote', 'RatingModel', 'Resource', 'ResourceGroup', 'SalesLiterature', 'SalesOrder', 'Service', 'ServiceAppointment', 'Site', 'SLA', 'SocialActivity', 'SocialProfile', 'SystemUser', 'Task', 'Team', 'Territory', 'UoM'.
     *
     * @return the semanticType value
     */
    public String semanticType() {
        return this.semanticType;
    }

    /**
     * Set possible values include: 'Account', 'AccountLeads', 'ActivityParty', 'ActivityPointer', 'Annotation', 'Appointment', 'BusinessUnit', 'Campaign', 'CampaignActivity', 'CampaignItem', 'CampaignResponse', 'Characteristic', 'Competitor', 'CompetitorAddress', 'CompetitorProduct', 'Connection', 'ConnectionRole', 'Contact', 'Contract', 'ContractDetail', 'Customer', 'CustomerAddress', 'CustomerRelationship', 'Discount', 'DiscountType', 'Email', 'Entitlement', 'Equipment', 'Fax', 'Feedback', 'Goal', 'Incident', 'Invoice', 'InvoiceDetail', 'KbArticle', 'KnowledgeArticle', 'Lead', 'LeadAddress', 'Letter', 'Metric', 'Opportunity', 'Organization', 'Owner', 'PhoneCall', 'Position', 'PriceLevel', 'Product', 'Quote', 'RatingModel', 'Resource', 'ResourceGroup', 'SalesLiterature', 'SalesOrder', 'Service', 'ServiceAppointment', 'Site', 'SLA', 'SocialActivity', 'SocialProfile', 'SystemUser', 'Task', 'Team', 'Territory', 'UoM'.
     *
     * @param semanticType the semanticType value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withSemanticType(String semanticType) {
        this.semanticType = semanticType;
        return this;
    }

    /**
     * Get gets last refresh time for entity.
     *
     * @return the refreshTime value
     */
    public DateTime refreshTime() {
        return this.refreshTime;
    }

    /**
     * Set gets last refresh time for entity.
     *
     * @param refreshTime the refreshTime value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withRefreshTime(DateTime refreshTime) {
        this.refreshTime = refreshTime;
        return this;
    }

    /**
     * Get gets entity data partitions.
     *
     * @return the partitions value
     */
    public List<PartitionMetadata> partitions() {
        return this.partitions;
    }

    /**
     * Set gets entity data partitions.
     *
     * @param partitions the partitions value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withPartitions(List<PartitionMetadata> partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Get gets entity incremental upsert data partitions.
     *
     * @return the incrementalUpsertPartitions value
     */
    public List<PartitionMetadata> incrementalUpsertPartitions() {
        return this.incrementalUpsertPartitions;
    }

    /**
     * Set gets entity incremental upsert data partitions.
     *
     * @param incrementalUpsertPartitions the incrementalUpsertPartitions value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withIncrementalUpsertPartitions(List<PartitionMetadata> incrementalUpsertPartitions) {
        this.incrementalUpsertPartitions = incrementalUpsertPartitions;
        return this;
    }

    /**
     * Get gets entity incremental delete data partitions.
     *
     * @return the incrementalDeletePartitions value
     */
    public List<PartitionMetadata> incrementalDeletePartitions() {
        return this.incrementalDeletePartitions;
    }

    /**
     * Set gets entity incremental delete data partitions.
     *
     * @param incrementalDeletePartitions the incrementalDeletePartitions value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withIncrementalDeletePartitions(List<PartitionMetadata> incrementalDeletePartitions) {
        this.incrementalDeletePartitions = incrementalDeletePartitions;
        return this;
    }

    /**
     * Get gets entity data parquet partitions.
     *
     * @return the fullPartitionsParquet value
     */
    public List<PartitionMetadata> fullPartitionsParquet() {
        return this.fullPartitionsParquet;
    }

    /**
     * Set gets entity data parquet partitions.
     *
     * @param fullPartitionsParquet the fullPartitionsParquet value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withFullPartitionsParquet(List<PartitionMetadata> fullPartitionsParquet) {
        this.fullPartitionsParquet = fullPartitionsParquet;
        return this;
    }

    /**
     * Get gets entity incremental upsert data parquet partitions.
     *
     * @return the incrementalUpsertPartitionsParquet value
     */
    public List<PartitionMetadata> incrementalUpsertPartitionsParquet() {
        return this.incrementalUpsertPartitionsParquet;
    }

    /**
     * Set gets entity incremental upsert data parquet partitions.
     *
     * @param incrementalUpsertPartitionsParquet the incrementalUpsertPartitionsParquet value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withIncrementalUpsertPartitionsParquet(List<PartitionMetadata> incrementalUpsertPartitionsParquet) {
        this.incrementalUpsertPartitionsParquet = incrementalUpsertPartitionsParquet;
        return this;
    }

    /**
     * Get gets entity incremental delete data parquet partitions.
     *
     * @return the incrementalDeletePartitionsParquet value
     */
    public List<PartitionMetadata> incrementalDeletePartitionsParquet() {
        return this.incrementalDeletePartitionsParquet;
    }

    /**
     * Set gets entity incremental delete data parquet partitions.
     *
     * @param incrementalDeletePartitionsParquet the incrementalDeletePartitionsParquet value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withIncrementalDeletePartitionsParquet(List<PartitionMetadata> incrementalDeletePartitionsParquet) {
        this.incrementalDeletePartitionsParquet = incrementalDeletePartitionsParquet;
        return this;
    }

    /**
     * Get gets base entity name.
     *
     * @return the annotations value
     */
    public List<Annotation> annotations() {
        return this.annotations;
    }

    /**
     * Set gets base entity name.
     *
     * @param annotations the annotations value to set
     * @return the IEntityMetadata object itself.
     */
    public IEntityMetadata withAnnotations(List<Annotation> annotations) {
        this.annotations = annotations;
        return this;
    }

}
