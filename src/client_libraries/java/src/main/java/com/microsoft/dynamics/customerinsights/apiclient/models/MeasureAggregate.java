/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.dynamics.customerinsights.apiclient.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents an aggregate.
 */
public class MeasureAggregate {
    /**
     * Possible values include: 'sum', 'avg', 'min', 'max', 'count',
     * 'countDistinct', 'first', 'last', 'argMax', 'argMin'.
     */
    @JsonProperty(value = "operation")
    private String operation;

    /**
     * Gets the field on which the aggregate operation is applied.
     */
    @JsonProperty(value = "field")
    private String field;

    /**
     * Gets the alias for the field.
     */
    @JsonProperty(value = "alias")
    private String alias;

    /**
     * Gets the display name for the aggregate.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /**
     * Gets the order for the aggregate.
     */
    @JsonProperty(value = "order")
    private Integer order;

    /**
     * Gets list of aggregates of the measure.
     */
    @JsonProperty(value = "aggregates")
    private List<MeasureAggregate> aggregates;

    /**
     * Gets a value indicating whether to display the field in results.
     */
    @JsonProperty(value = "isIncluded")
    private Boolean isIncluded;

    /**
     * Get possible values include: 'sum', 'avg', 'min', 'max', 'count', 'countDistinct', 'first', 'last', 'argMax', 'argMin'.
     *
     * @return the operation value
     */
    public String operation() {
        return this.operation;
    }

    /**
     * Set possible values include: 'sum', 'avg', 'min', 'max', 'count', 'countDistinct', 'first', 'last', 'argMax', 'argMin'.
     *
     * @param operation the operation value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withOperation(String operation) {
        this.operation = operation;
        return this;
    }

    /**
     * Get gets the field on which the aggregate operation is applied.
     *
     * @return the field value
     */
    public String field() {
        return this.field;
    }

    /**
     * Set gets the field on which the aggregate operation is applied.
     *
     * @param field the field value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withField(String field) {
        this.field = field;
        return this;
    }

    /**
     * Get gets the alias for the field.
     *
     * @return the alias value
     */
    public String alias() {
        return this.alias;
    }

    /**
     * Set gets the alias for the field.
     *
     * @param alias the alias value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withAlias(String alias) {
        this.alias = alias;
        return this;
    }

    /**
     * Get gets the display name for the aggregate.
     *
     * @return the displayName value
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set gets the display name for the aggregate.
     *
     * @param displayName the displayName value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get gets the order for the aggregate.
     *
     * @return the order value
     */
    public Integer order() {
        return this.order;
    }

    /**
     * Set gets the order for the aggregate.
     *
     * @param order the order value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withOrder(Integer order) {
        this.order = order;
        return this;
    }

    /**
     * Get gets list of aggregates of the measure.
     *
     * @return the aggregates value
     */
    public List<MeasureAggregate> aggregates() {
        return this.aggregates;
    }

    /**
     * Set gets list of aggregates of the measure.
     *
     * @param aggregates the aggregates value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withAggregates(List<MeasureAggregate> aggregates) {
        this.aggregates = aggregates;
        return this;
    }

    /**
     * Get gets a value indicating whether to display the field in results.
     *
     * @return the isIncluded value
     */
    public Boolean isIncluded() {
        return this.isIncluded;
    }

    /**
     * Set gets a value indicating whether to display the field in results.
     *
     * @param isIncluded the isIncluded value to set
     * @return the MeasureAggregate object itself.
     */
    public MeasureAggregate withIsIncluded(Boolean isIncluded) {
        this.isIncluded = isIncluded;
        return this;
    }

}
