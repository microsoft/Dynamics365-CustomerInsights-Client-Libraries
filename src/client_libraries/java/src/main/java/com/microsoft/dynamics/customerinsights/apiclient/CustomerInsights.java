/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.dynamics.customerinsights.apiclient;

import com.microsoft.dynamics.customerinsights.apiclient.models.ActivateSegmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CancelAWorkflowJobHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CopyAnInstanceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CreateAMeasureHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CreateAnEntityHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CreateAnInstanceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CreateARelationshipHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CreateASegmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.CreateWorkflowRefreshScheduleHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeactivateSegmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeleteADataSourceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeleteAMeasureHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeleteAnInstanceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeleteARelationshipHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeletesARoleAssignmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.DeleteSegmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAListOfMeasuresMetadataHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllDataSourcesHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllEntityMetadataHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllInstancesHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllInstancesInBatchesByInstanceidsHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllRelationshipsHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllRoleAssignmentsHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllRoleDefinitionsHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAllSegmentsHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAnAttributeProfileHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAnEntityProfileHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetARelationshipHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetAWorkflowJobInformationHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetCurrentUserRoleHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetDataSourceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetEntitiesWithODataPathHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetEntityMetadataHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetEntitySizeHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetInstanceMetadataHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetKeyRingHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetListOfRecentWorkflowJobsHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetListOfWorkflowTaskInformationHistoryHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetMetadataForAMeasureHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetProfileStoreStateHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetSearchConfigurationHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetSupportedTimezonesHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetWorkflowSchedulesHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.GetWorkflowStatusHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesCopyPostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageMeasuresMeasureNamePutRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageMeasuresPostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageRelationshipsPostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageRelationshipsRelationshipNamePutRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageSearchPutRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageSegmentsPostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdManageSegmentsSegmentNamePutRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdRbacPrincipalsPrincipalIdAssignmentPutRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdV2PatchRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdWorkflowsWorkflowNameJobsPostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesInstanceIdWorkflowsWorkflowNameSchedulesPostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.InstancesV2PostRequest;
import com.microsoft.dynamics.customerinsights.apiclient.models.ResetAnInstanceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.RoleAssignment;
import com.microsoft.dynamics.customerinsights.apiclient.models.RoleDefinition;
import com.microsoft.dynamics.customerinsights.apiclient.models.SubmitAWorkflowJobHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateAMeasureHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateAnEntityHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateAnInstanceHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateARelationshipHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateARoleAssignmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateASegmentHeaders;
import com.microsoft.dynamics.customerinsights.apiclient.models.UpdateSearchConfigurationHeaders;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for CustomerInsights class.
 */
public interface CustomerInsights {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://api.ci.ai.dynamics.com/v1";

    /**
     * GetAttributeProfile.
     * Gets the specific attribute profile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @param attributeName Attribute Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAnAttributeProfile(String instanceId, String qualifiedEntityName, String attributeName);

    /**
     * GetAttributeProfile.
     * Gets the specific attribute profile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @param attributeName Attribute Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAnAttributeProfileAsync(String instanceId, String qualifiedEntityName, String attributeName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetAttributeProfile.
     * Gets the specific attribute profile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @param attributeName Attribute Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAnAttributeProfileAsync(String instanceId, String qualifiedEntityName, String attributeName);

    /**
     * GetAttributeProfile.
     * Gets the specific attribute profile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @param attributeName Attribute Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAnAttributeProfileHeaders>> getAnAttributeProfileWithServiceResponseAsync(String instanceId, String qualifiedEntityName, String attributeName);

    /**
     * GetAllDataSources.
     * Returns a collections of DataSourceInfo configured for the given Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id for which to fetch data source info.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllDataSources(String instanceId);

    /**
     * GetAllDataSources.
     * Returns a collections of DataSourceInfo configured for the given Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id for which to fetch data source info.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllDataSourcesAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetAllDataSources.
     * Returns a collections of DataSourceInfo configured for the given Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id for which to fetch data source info.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllDataSourcesAsync(String instanceId);

    /**
     * GetAllDataSources.
     * Returns a collections of DataSourceInfo configured for the given Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id for which to fetch data source info.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllDataSourcesHeaders>> getAllDataSourcesWithServiceResponseAsync(String instanceId);

    /**
     * GetDataSource.
     * Fetches a DataSourceInfo matching the dataSourceId configured for the Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id to fetch data source info for.
     * @param dataSourceId Format - uuid. The data source id to fetch info for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getDataSource(String instanceId, String dataSourceId);

    /**
     * GetDataSource.
     * Fetches a DataSourceInfo matching the dataSourceId configured for the Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id to fetch data source info for.
     * @param dataSourceId Format - uuid. The data source id to fetch info for.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getDataSourceAsync(String instanceId, String dataSourceId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetDataSource.
     * Fetches a DataSourceInfo matching the dataSourceId configured for the Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id to fetch data source info for.
     * @param dataSourceId Format - uuid. The data source id to fetch info for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getDataSourceAsync(String instanceId, String dataSourceId);

    /**
     * GetDataSource.
     * Fetches a DataSourceInfo matching the dataSourceId configured for the Customer Insights instance.
     *
     * @param instanceId Format - uuid. The instance id to fetch data source info for.
     * @param dataSourceId Format - uuid. The data source id to fetch info for.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetDataSourceHeaders>> getDataSourceWithServiceResponseAsync(String instanceId, String dataSourceId);

    /**
     * DeleteDataSource.
     * Deletes a data source from the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param dataSourceId Format - uuid. The data source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteADataSource(String instanceId, String dataSourceId);

    /**
     * DeleteDataSource.
     * Deletes a data source from the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param dataSourceId Format - uuid. The data source id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteADataSourceAsync(String instanceId, String dataSourceId, final ServiceCallback<Object> serviceCallback);

    /**
     * DeleteDataSource.
     * Deletes a data source from the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param dataSourceId Format - uuid. The data source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteADataSourceAsync(String instanceId, String dataSourceId);

    /**
     * DeleteDataSource.
     * Deletes a data source from the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param dataSourceId Format - uuid. The data source id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DeleteADataSourceHeaders>> deleteADataSourceWithServiceResponseAsync(String instanceId, String dataSourceId);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createAnEntity(String instanceId, String entityName);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAnEntityAsync(String instanceId, String entityName, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAnEntityAsync(String instanceId, String entityName);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateAnEntityHeaders>> createAnEntityWithServiceResponseAsync(String instanceId, String entityName);
    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @param body JSON document representing the entity. The schema must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createAnEntity(String instanceId, String entityName, String body, String validUntil, String caller);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @param body JSON document representing the entity. The schema must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAnEntityAsync(String instanceId, String entityName, String body, String validUntil, String caller, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @param body JSON document representing the entity. The schema must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAnEntityAsync(String instanceId, String entityName, String body, String validUntil, String caller);

    /**
     * CreateEntity (Preview).
     * Writes an entity instance into the store, g. an activity entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, consisting of 'DataSource_EntityName' e.g. 'PoS_posPurchases', or 'UnifiedActivity'.
     * @param body JSON document representing the entity. The schema must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateAnEntityHeaders>> createAnEntityWithServiceResponseAsync(String instanceId, String entityName, String body, String validUntil, String caller);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAnEntity(String instanceId, String entityName, String entityId);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAnEntityAsync(String instanceId, String entityName, String entityId, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAnEntityAsync(String instanceId, String entityName, String entityId);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAnEntityHeaders>> updateAnEntityWithServiceResponseAsync(String instanceId, String entityName, String entityId);
    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @param body JSON document with set of changes to apply on the entity. Each change must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAnEntity(String instanceId, String entityName, String entityId, String body, String validUntil, String caller);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @param body JSON document with set of changes to apply on the entity. Each change must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAnEntityAsync(String instanceId, String entityName, String entityId, String body, String validUntil, String caller, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @param body JSON document with set of changes to apply on the entity. Each change must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAnEntityAsync(String instanceId, String entityName, String entityId, String body, String validUntil, String caller);

    /**
     * UpdateEntity (Preview).
     * Updates an entity instance in the store, g. Customer entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance Id.
     * @param entityName Fully qualified entity name, e.g. 'Customer'.
     * @param entityId Id of the entity to update, e.g. 'CustomerId' of a Customer entity.
     * @param body JSON document with set of changes to apply on the entity. Each change must be consistent with the entity metadata. Use GET action of this resource to obtain an example.
     * @param validUntil Format - date-time (as date-time in RFC3339). Expiration time of the change; ISO8601; optional. The value can be maximum 30 days in the future. If the datasource for this entity doesn't contain the changes after this time, the update disappears from the store.
     * @param caller String to identify the caller; optional.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAnEntityHeaders>> updateAnEntityWithServiceResponseAsync(String instanceId, String entityName, String entityId, String body, String validUntil, String caller);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEntitiesWithODataPath(String instanceId, String relativePath);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEntitiesWithODataPathAsync(String instanceId, String relativePath, final ServiceCallback<Object> serviceCallback);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEntitiesWithODataPathAsync(String instanceId, String relativePath);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEntitiesWithODataPathHeaders>> getEntitiesWithODataPathWithServiceResponseAsync(String instanceId, String relativePath);
    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @param forceSearch Whether force use search to support the query.
     * @param proxy Whether or not we are requesting data by proxy.
     * @param search Search OData parameter.
     * @param select Select OData parameter.
     * @param skip Skip OData parameter.
     * @param skiptoken SkipToken OData parameter.
     * @param filter Filter OData parameter.
     * @param orderby OrderBy OData parameter.
     * @param expand Expand OData parameter.
     * @param top Top OData parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEntitiesWithODataPath(String instanceId, String relativePath, Boolean forceSearch, Boolean proxy, String search, String select, String skip, String skiptoken, String filter, String orderby, String expand, String top);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @param forceSearch Whether force use search to support the query.
     * @param proxy Whether or not we are requesting data by proxy.
     * @param search Search OData parameter.
     * @param select Select OData parameter.
     * @param skip Skip OData parameter.
     * @param skiptoken SkipToken OData parameter.
     * @param filter Filter OData parameter.
     * @param orderby OrderBy OData parameter.
     * @param expand Expand OData parameter.
     * @param top Top OData parameter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEntitiesWithODataPathAsync(String instanceId, String relativePath, Boolean forceSearch, Boolean proxy, String search, String select, String skip, String skiptoken, String filter, String orderby, String expand, String top, final ServiceCallback<Object> serviceCallback);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @param forceSearch Whether force use search to support the query.
     * @param proxy Whether or not we are requesting data by proxy.
     * @param search Search OData parameter.
     * @param select Select OData parameter.
     * @param skip Skip OData parameter.
     * @param skiptoken SkipToken OData parameter.
     * @param filter Filter OData parameter.
     * @param orderby OrderBy OData parameter.
     * @param expand Expand OData parameter.
     * @param top Top OData parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEntitiesWithODataPathAsync(String instanceId, String relativePath, Boolean forceSearch, Boolean proxy, String search, String select, String skip, String skiptoken, String filter, String orderby, String expand, String top);

    /**
     * GetEntityByODataQuery.
     * Submits an OData request to the service.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param relativePath Relative OData path. See https://www.odata.org/getting-started/basic-tutorial/ for info.
     * @param forceSearch Whether force use search to support the query.
     * @param proxy Whether or not we are requesting data by proxy.
     * @param search Search OData parameter.
     * @param select Select OData parameter.
     * @param skip Skip OData parameter.
     * @param skiptoken SkipToken OData parameter.
     * @param filter Filter OData parameter.
     * @param orderby OrderBy OData parameter.
     * @param expand Expand OData parameter.
     * @param top Top OData parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEntitiesWithODataPathHeaders>> getEntitiesWithODataPathWithServiceResponseAsync(String instanceId, String relativePath, Boolean forceSearch, Boolean proxy, String search, String select, String skip, String skiptoken, String filter, String orderby, String expand, String top);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllEntityMetadata(String instanceId);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllEntityMetadataAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllEntityMetadataAsync(String instanceId);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllEntityMetadataHeaders>> getAllEntityMetadataWithServiceResponseAsync(String instanceId);
    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @param includeQuarantined Indicates if quarantined entities should be included in the output entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllEntityMetadata(String instanceId, Boolean attributesAnnotations, Boolean includeQuarantined);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @param includeQuarantined Indicates if quarantined entities should be included in the output entity model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllEntityMetadataAsync(String instanceId, Boolean attributesAnnotations, Boolean includeQuarantined, final ServiceCallback<Object> serviceCallback);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @param includeQuarantined Indicates if quarantined entities should be included in the output entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllEntityMetadataAsync(String instanceId, Boolean attributesAnnotations, Boolean includeQuarantined);

    /**
     * GetAllEntitiesMetadata.
     * Retrieves the flattened entity model for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @param includeQuarantined Indicates if quarantined entities should be included in the output entity model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllEntityMetadataHeaders>> getAllEntityMetadataWithServiceResponseAsync(String instanceId, Boolean attributesAnnotations, Boolean includeQuarantined);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEntityMetadata(String instanceId, String entityName);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEntityMetadataAsync(String instanceId, String entityName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEntityMetadataAsync(String instanceId, String entityName);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEntityMetadataHeaders>> getEntityMetadataWithServiceResponseAsync(String instanceId, String entityName);
    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEntityMetadata(String instanceId, String entityName, Boolean attributesAnnotations);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEntityMetadataAsync(String instanceId, String entityName, Boolean attributesAnnotations, final ServiceCallback<Object> serviceCallback);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEntityMetadataAsync(String instanceId, String entityName, Boolean attributesAnnotations);

    /**
     * GetEntityMetadata.
     * Retrieves the entity metadata for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @param attributesAnnotations Indicates if extra annotations like 'ReadOnly' or 'Mandatory' should be included.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEntityMetadataHeaders>> getEntityMetadataWithServiceResponseAsync(String instanceId, String entityName, Boolean attributesAnnotations);

    /**
     * GetEntitySize.
     * Retrieves the entity size for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getEntitySize(String instanceId, String entityName);

    /**
     * GetEntitySize.
     * Retrieves the entity size for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getEntitySizeAsync(String instanceId, String entityName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetEntitySize.
     * Retrieves the entity size for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getEntitySizeAsync(String instanceId, String entityName);

    /**
     * GetEntitySize.
     * Retrieves the entity size for the provided instanceId and entityName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param entityName Entity name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetEntitySizeHeaders>> getEntitySizeWithServiceResponseAsync(String instanceId, String entityName);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object resetAnInstance(String instanceId);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> resetAnInstanceAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> resetAnInstanceAsync(String instanceId);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, ResetAnInstanceHeaders>> resetAnInstanceWithServiceResponseAsync(String instanceId);
    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @param instanceManagementOperationScope The management operation scope for reset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object resetAnInstance(String instanceId, String instanceManagementOperationScope);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @param instanceManagementOperationScope The management operation scope for reset.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> resetAnInstanceAsync(String instanceId, String instanceManagementOperationScope, final ServiceCallback<Object> serviceCallback);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @param instanceManagementOperationScope The management operation scope for reset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> resetAnInstanceAsync(String instanceId, String instanceManagementOperationScope);

    /**
     * ResetInstance.
     * Reset scopes in the given instance. Provide optional management operation scope to reset only that scope.
     *
     * @param instanceId Format - uuid. The instance Id.
     * @param instanceManagementOperationScope The management operation scope for reset.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, ResetAnInstanceHeaders>> resetAnInstanceWithServiceResponseAsync(String instanceId, String instanceManagementOperationScope);

    /**
     * ListAllInstances.
     * Retrieves all instances of the current user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllInstances();

    /**
     * ListAllInstances.
     * Retrieves all instances of the current user.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllInstancesAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * ListAllInstances.
     * Retrieves all instances of the current user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllInstancesAsync();

    /**
     * ListAllInstances.
     * Retrieves all instances of the current user.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllInstancesHeaders>> getAllInstancesWithServiceResponseAsync();

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllInstancesInBatchesByInstanceids();

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllInstancesInBatchesByInstanceidsAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllInstancesInBatchesByInstanceidsAsync();

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllInstancesInBatchesByInstanceidsHeaders>> getAllInstancesInBatchesByInstanceidsWithServiceResponseAsync();
    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @param body Instance ids of instances to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllInstancesInBatchesByInstanceids(List<UUID> body);

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @param body Instance ids of instances to get.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllInstancesInBatchesByInstanceidsAsync(List<UUID> body, final ServiceCallback<Object> serviceCallback);

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @param body Instance ids of instances to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllInstancesInBatchesByInstanceidsAsync(List<UUID> body);

    /**
     * ListInstancesByInstanceIds.
     * Retrieves instances based on instance ids, it can only accept batch of instances.
     *
     * @param body Instance ids of instances to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllInstancesInBatchesByInstanceidsHeaders>> getAllInstancesInBatchesByInstanceidsWithServiceResponseAsync(List<UUID> body);

    /**
     * GetInstance.
     * Retrieves metadata for a Customer Insights instance based on its instanceId.
     *
     * @param instanceId Format - uuid. Unique id for the Customer Insights instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getInstanceMetadata(String instanceId);

    /**
     * GetInstance.
     * Retrieves metadata for a Customer Insights instance based on its instanceId.
     *
     * @param instanceId Format - uuid. Unique id for the Customer Insights instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getInstanceMetadataAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetInstance.
     * Retrieves metadata for a Customer Insights instance based on its instanceId.
     *
     * @param instanceId Format - uuid. Unique id for the Customer Insights instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getInstanceMetadataAsync(String instanceId);

    /**
     * GetInstance.
     * Retrieves metadata for a Customer Insights instance based on its instanceId.
     *
     * @param instanceId Format - uuid. Unique id for the Customer Insights instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetInstanceMetadataHeaders>> getInstanceMetadataWithServiceResponseAsync(String instanceId);

    /**
     * DeleteInstance.
     * Delete an instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteAnInstance(String instanceId);

    /**
     * DeleteInstance.
     * Delete an instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteAnInstanceAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * DeleteInstance.
     * Delete an instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteAnInstanceAsync(String instanceId);

    /**
     * DeleteInstance.
     * Delete an instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DeleteAnInstanceHeaders>> deleteAnInstanceWithServiceResponseAsync(String instanceId);

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createAnInstance();

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAnInstanceAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAnInstanceAsync();

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateAnInstanceHeaders>> createAnInstanceWithServiceResponseAsync();
    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @param body The instance creation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createAnInstance(InstancesV2PostRequest body);

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @param body The instance creation request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAnInstanceAsync(InstancesV2PostRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @param body The instance creation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAnInstanceAsync(InstancesV2PostRequest body);

    /**
     * CreateInstance.
     * Creates a new instance.
     *
     * @param body The instance creation request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateAnInstanceHeaders>> createAnInstanceWithServiceResponseAsync(InstancesV2PostRequest body);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAnInstance(String instanceId);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAnInstanceAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAnInstanceAsync(String instanceId);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAnInstanceHeaders>> updateAnInstanceWithServiceResponseAsync(String instanceId);
    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @param body the InstancesInstanceIdV2PatchRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAnInstance(String instanceId, InstancesInstanceIdV2PatchRequest body);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @param body the InstancesInstanceIdV2PatchRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAnInstanceAsync(String instanceId, InstancesInstanceIdV2PatchRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @param body the InstancesInstanceIdV2PatchRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAnInstanceAsync(String instanceId, InstancesInstanceIdV2PatchRequest body);

    /**
     * UpdateInstance.
     * Patches the Market Verticals, Display name, Domain Name, CDS environment and BYOSA secret to the instance.
     *
     * @param instanceId Format - uuid.
     * @param body the InstancesInstanceIdV2PatchRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAnInstanceHeaders>> updateAnInstanceWithServiceResponseAsync(String instanceId, InstancesInstanceIdV2PatchRequest body);

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object copyAnInstance();

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> copyAnInstanceAsync(final ServiceCallback<Object> serviceCallback);

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> copyAnInstanceAsync();

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CopyAnInstanceHeaders>> copyAnInstanceWithServiceResponseAsync();
    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @param body The metadata to use to create the new instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object copyAnInstance(InstancesCopyPostRequest body);

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @param body The metadata to use to create the new instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> copyAnInstanceAsync(InstancesCopyPostRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @param body The metadata to use to create the new instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> copyAnInstanceAsync(InstancesCopyPostRequest body);

    /**
     * CopyInstance.
     * Create a new instance and copy metadata from an existing instance.
     *
     * @param body The metadata to use to create the new instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CopyAnInstanceHeaders>> copyAnInstanceWithServiceResponseAsync(InstancesCopyPostRequest body);

    /**
     * ListAllMeasuresMetadata.
     * ListAllMeasuresMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAListOfMeasuresMetadata(String instanceId);

    /**
     * ListAllMeasuresMetadata.
     * ListAllMeasuresMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAListOfMeasuresMetadataAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * ListAllMeasuresMetadata.
     * ListAllMeasuresMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAListOfMeasuresMetadataAsync(String instanceId);

    /**
     * ListAllMeasuresMetadata.
     * ListAllMeasuresMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAListOfMeasuresMetadataHeaders>> getAListOfMeasuresMetadataWithServiceResponseAsync(String instanceId);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createAMeasure(String instanceId);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAMeasureAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAMeasureAsync(String instanceId);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateAMeasureHeaders>> createAMeasureWithServiceResponseAsync(String instanceId);
    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Measure metadata to be created
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createAMeasure(String instanceId, InstancesInstanceIdManageMeasuresPostRequest body);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Measure metadata to be created
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAMeasureAsync(String instanceId, InstancesInstanceIdManageMeasuresPostRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Measure metadata to be created
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAMeasureAsync(String instanceId, InstancesInstanceIdManageMeasuresPostRequest body);

    /**
     * CreateMeasure.
     * CreateMeasure.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Measure metadata to be created
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateAMeasureHeaders>> createAMeasureWithServiceResponseAsync(String instanceId, InstancesInstanceIdManageMeasuresPostRequest body);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getMetadataForAMeasure(String instanceId, String measureName);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getMetadataForAMeasureAsync(String instanceId, String measureName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getMetadataForAMeasureAsync(String instanceId, String measureName);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetMetadataForAMeasureHeaders>> getMetadataForAMeasureWithServiceResponseAsync(String instanceId, String measureName);
    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param includeHistoricStats Boolean for historical stats
     * @param historicStatsDays Format - int32. Number of lookback days
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getMetadataForAMeasure(String instanceId, String measureName, Boolean includeHistoricStats, Integer historicStatsDays);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param includeHistoricStats Boolean for historical stats
     * @param historicStatsDays Format - int32. Number of lookback days
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getMetadataForAMeasureAsync(String instanceId, String measureName, Boolean includeHistoricStats, Integer historicStatsDays, final ServiceCallback<Object> serviceCallback);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param includeHistoricStats Boolean for historical stats
     * @param historicStatsDays Format - int32. Number of lookback days
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getMetadataForAMeasureAsync(String instanceId, String measureName, Boolean includeHistoricStats, Integer historicStatsDays);

    /**
     * GetMeasureMetadata.
     * Retrieves the measure metadata for the provided instanceId and measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param includeHistoricStats Boolean for historical stats
     * @param historicStatsDays Format - int32. Number of lookback days
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetMetadataForAMeasureHeaders>> getMetadataForAMeasureWithServiceResponseAsync(String instanceId, String measureName, Boolean includeHistoricStats, Integer historicStatsDays);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAMeasure(String instanceId, String measureName);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAMeasureAsync(String instanceId, String measureName, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAMeasureAsync(String instanceId, String measureName);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAMeasureHeaders>> updateAMeasureWithServiceResponseAsync(String instanceId, String measureName);
    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param body Update measure metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateAMeasure(String instanceId, String measureName, InstancesInstanceIdManageMeasuresMeasureNamePutRequest body);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param body Update measure metadata
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateAMeasureAsync(String instanceId, String measureName, InstancesInstanceIdManageMeasuresMeasureNamePutRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param body Update measure metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateAMeasureAsync(String instanceId, String measureName, InstancesInstanceIdManageMeasuresMeasureNamePutRequest body);

    /**
     * UpdateMeasure.
     * Updates measures metadata for the provided instanceId and measureMetadata.
     Existing measure is retrieved using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param body Update measure metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateAMeasureHeaders>> updateAMeasureWithServiceResponseAsync(String instanceId, String measureName, InstancesInstanceIdManageMeasuresMeasureNamePutRequest body);

    /**
     * DeleteMeasure.
     * Deletes the measure metadata for the provided instanceId using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteAMeasure(String instanceId, String measureName);

    /**
     * DeleteMeasure.
     * Deletes the measure metadata for the provided instanceId using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteAMeasureAsync(String instanceId, String measureName, final ServiceCallback<Object> serviceCallback);

    /**
     * DeleteMeasure.
     * Deletes the measure metadata for the provided instanceId using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteAMeasureAsync(String instanceId, String measureName);

    /**
     * DeleteMeasure.
     * Deletes the measure metadata for the provided instanceId using measureName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param measureName Name of the measure
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DeleteAMeasureHeaders>> deleteAMeasureWithServiceResponseAsync(String instanceId, String measureName);

    /**
     * GetKeyRing.
     * Gets the KeyRing (collection of all alternate keys) for the given instance by alternate key.
     *
     * @param instanceId Format - uuid. Identifier for the instance
     * @param dataSourceName The name of the datasource that contains the given entity.
     * @param entityName The name of the entity that contains the given key.
     * @param key The value of the alternate key provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getKeyRing(String instanceId, String dataSourceName, String entityName, String key);

    /**
     * GetKeyRing.
     * Gets the KeyRing (collection of all alternate keys) for the given instance by alternate key.
     *
     * @param instanceId Format - uuid. Identifier for the instance
     * @param dataSourceName The name of the datasource that contains the given entity.
     * @param entityName The name of the entity that contains the given key.
     * @param key The value of the alternate key provided.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getKeyRingAsync(String instanceId, String dataSourceName, String entityName, String key, final ServiceCallback<Object> serviceCallback);

    /**
     * GetKeyRing.
     * Gets the KeyRing (collection of all alternate keys) for the given instance by alternate key.
     *
     * @param instanceId Format - uuid. Identifier for the instance
     * @param dataSourceName The name of the datasource that contains the given entity.
     * @param entityName The name of the entity that contains the given key.
     * @param key The value of the alternate key provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getKeyRingAsync(String instanceId, String dataSourceName, String entityName, String key);

    /**
     * GetKeyRing.
     * Gets the KeyRing (collection of all alternate keys) for the given instance by alternate key.
     *
     * @param instanceId Format - uuid. Identifier for the instance
     * @param dataSourceName The name of the datasource that contains the given entity.
     * @param entityName The name of the entity that contains the given key.
     * @param key The value of the alternate key provided.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetKeyRingHeaders>> getKeyRingWithServiceResponseAsync(String instanceId, String dataSourceName, String entityName, String key);

    /**
     * GetProfileStoreState.
     * Gets the profile store state infoformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getProfileStoreState(String instanceId);

    /**
     * GetProfileStoreState.
     * Gets the profile store state infoformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getProfileStoreStateAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetProfileStoreState.
     * Gets the profile store state infoformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getProfileStoreStateAsync(String instanceId);

    /**
     * GetProfileStoreState.
     * Gets the profile store state infoformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetProfileStoreStateHeaders>> getProfileStoreStateWithServiceResponseAsync(String instanceId);

    /**
     * ListAllRoles.
     * Get all role definitions.
     *
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RoleDefinition&gt; object if successful.
     */
    List<RoleDefinition> getAllRoleDefinitions(String instanceId);

    /**
     * ListAllRoles.
     * Get all role definitions.
     *
     * @param instanceId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<RoleDefinition>> getAllRoleDefinitionsAsync(String instanceId, final ServiceCallback<List<RoleDefinition>> serviceCallback);

    /**
     * ListAllRoles.
     * Get all role definitions.
     *
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleDefinition&gt; object
     */
    Observable<List<RoleDefinition>> getAllRoleDefinitionsAsync(String instanceId);

    /**
     * ListAllRoles.
     * Get all role definitions.
     *
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleDefinition&gt; object
     */
    Observable<ServiceResponseWithHeaders<List<RoleDefinition>, GetAllRoleDefinitionsHeaders>> getAllRoleDefinitionsWithServiceResponseAsync(String instanceId);

    /**
     * GetCurrentUserRole.
     * Get role of current user.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RoleAssignment object if successful.
     */
    RoleAssignment getCurrentUserRole(String instanceId);

    /**
     * GetCurrentUserRole.
     * Get role of current user.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<RoleAssignment> getCurrentUserRoleAsync(String instanceId, final ServiceCallback<RoleAssignment> serviceCallback);

    /**
     * GetCurrentUserRole.
     * Get role of current user.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleAssignment object
     */
    Observable<RoleAssignment> getCurrentUserRoleAsync(String instanceId);

    /**
     * GetCurrentUserRole.
     * Get role of current user.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RoleAssignment object
     */
    Observable<ServiceResponseWithHeaders<RoleAssignment, GetCurrentUserRoleHeaders>> getCurrentUserRoleWithServiceResponseAsync(String instanceId);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RoleAssignment&gt; object if successful.
     */
    List<RoleAssignment> updateARoleAssignment(String instanceId, String principalId);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<RoleAssignment>> updateARoleAssignmentAsync(String instanceId, String principalId, final ServiceCallback<List<RoleAssignment>> serviceCallback);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleAssignment&gt; object
     */
    Observable<List<RoleAssignment>> updateARoleAssignmentAsync(String instanceId, String principalId);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleAssignment&gt; object
     */
    Observable<ServiceResponseWithHeaders<List<RoleAssignment>, UpdateARoleAssignmentHeaders>> updateARoleAssignmentWithServiceResponseAsync(String instanceId, String principalId);
    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @param body The role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RoleAssignment&gt; object if successful.
     */
    List<RoleAssignment> updateARoleAssignment(String instanceId, String principalId, InstancesInstanceIdRbacPrincipalsPrincipalIdAssignmentPutRequest body);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @param body The role assignment.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<RoleAssignment>> updateARoleAssignmentAsync(String instanceId, String principalId, InstancesInstanceIdRbacPrincipalsPrincipalIdAssignmentPutRequest body, final ServiceCallback<List<RoleAssignment>> serviceCallback);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @param body The role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleAssignment&gt; object
     */
    Observable<List<RoleAssignment>> updateARoleAssignmentAsync(String instanceId, String principalId, InstancesInstanceIdRbacPrincipalsPrincipalIdAssignmentPutRequest body);

    /**
     * UpdateRoleAssignment.
     * Adds or updates a role assignment for a principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @param body The role assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleAssignment&gt; object
     */
    Observable<ServiceResponseWithHeaders<List<RoleAssignment>, UpdateARoleAssignmentHeaders>> updateARoleAssignmentWithServiceResponseAsync(String instanceId, String principalId, InstancesInstanceIdRbacPrincipalsPrincipalIdAssignmentPutRequest body);

    /**
     * DeleteRoleAssignment.
     * Deletes a role assignment for the principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deletesARoleAssignment(String instanceId, String principalId);

    /**
     * DeleteRoleAssignment.
     * Deletes a role assignment for the principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deletesARoleAssignmentAsync(String instanceId, String principalId, final ServiceCallback<Void> serviceCallback);

    /**
     * DeleteRoleAssignment.
     * Deletes a role assignment for the principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<Void> deletesARoleAssignmentAsync(String instanceId, String principalId);

    /**
     * DeleteRoleAssignment.
     * Deletes a role assignment for the principal.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param principalId The principal id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    Observable<ServiceResponseWithHeaders<Void, DeletesARoleAssignmentHeaders>> deletesARoleAssignmentWithServiceResponseAsync(String instanceId, String principalId);

    /**
     * ListAllRoleAssignments.
     * Gets all role assignments for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RoleAssignment&gt; object if successful.
     */
    List<RoleAssignment> getAllRoleAssignments(String instanceId);

    /**
     * ListAllRoleAssignments.
     * Gets all role assignments for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<RoleAssignment>> getAllRoleAssignmentsAsync(String instanceId, final ServiceCallback<List<RoleAssignment>> serviceCallback);

    /**
     * ListAllRoleAssignments.
     * Gets all role assignments for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleAssignment&gt; object
     */
    Observable<List<RoleAssignment>> getAllRoleAssignmentsAsync(String instanceId);

    /**
     * ListAllRoleAssignments.
     * Gets all role assignments for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RoleAssignment&gt; object
     */
    Observable<ServiceResponseWithHeaders<List<RoleAssignment>, GetAllRoleAssignmentsHeaders>> getAllRoleAssignmentsWithServiceResponseAsync(String instanceId);

    /**
     * ListAllRelationships.
     * Gets all relationship metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllRelationships(String instanceId);

    /**
     * ListAllRelationships.
     * Gets all relationship metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllRelationshipsAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * ListAllRelationships.
     * Gets all relationship metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllRelationshipsAsync(String instanceId);

    /**
     * ListAllRelationships.
     * Gets all relationship metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllRelationshipsHeaders>> getAllRelationshipsWithServiceResponseAsync(String instanceId);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createARelationship(String instanceId);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createARelationshipAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createARelationshipAsync(String instanceId);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateARelationshipHeaders>> createARelationshipWithServiceResponseAsync(String instanceId);
    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body The updated relationship metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createARelationship(String instanceId, InstancesInstanceIdManageRelationshipsPostRequest body);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body The updated relationship metadata
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createARelationshipAsync(String instanceId, InstancesInstanceIdManageRelationshipsPostRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body The updated relationship metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createARelationshipAsync(String instanceId, InstancesInstanceIdManageRelationshipsPostRequest body);

    /**
     * CreateRelationship.
     * Creates new relationship metadata for the provided instanceId, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body The updated relationship metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateARelationshipHeaders>> createARelationshipWithServiceResponseAsync(String instanceId, InstancesInstanceIdManageRelationshipsPostRequest body);

    /**
     * GetRelationship.
     * Gets the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getARelationship(String instanceId, String relationshipName);

    /**
     * GetRelationship.
     * Gets the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getARelationshipAsync(String instanceId, String relationshipName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetRelationship.
     * Gets the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getARelationshipAsync(String instanceId, String relationshipName);

    /**
     * GetRelationship.
     * Gets the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetARelationshipHeaders>> getARelationshipWithServiceResponseAsync(String instanceId, String relationshipName);

    /**
     * DeleteRelationship.
     * Deletes the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteARelationship(String instanceId, String relationshipName);

    /**
     * DeleteRelationship.
     * Deletes the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteARelationshipAsync(String instanceId, String relationshipName, final ServiceCallback<Object> serviceCallback);

    /**
     * DeleteRelationship.
     * Deletes the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteARelationshipAsync(String instanceId, String relationshipName);

    /**
     * DeleteRelationship.
     * Deletes the relationship metadata for the provided instanceId and relationshipName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DeleteARelationshipHeaders>> deleteARelationshipWithServiceResponseAsync(String instanceId, String relationshipName);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateARelationship(String instanceId, String relationshipName);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateARelationshipAsync(String instanceId, String relationshipName, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateARelationshipAsync(String instanceId, String relationshipName);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateARelationshipHeaders>> updateARelationshipWithServiceResponseAsync(String instanceId, String relationshipName);
    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param body The updated relationship metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateARelationship(String instanceId, String relationshipName, InstancesInstanceIdManageRelationshipsRelationshipNamePutRequest body);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param body The updated relationship metadata
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateARelationshipAsync(String instanceId, String relationshipName, InstancesInstanceIdManageRelationshipsRelationshipNamePutRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param body The updated relationship metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateARelationshipAsync(String instanceId, String relationshipName, InstancesInstanceIdManageRelationshipsRelationshipNamePutRequest body);

    /**
     * UpdateRelationshhip.
     * Updates the relationship metadata for the provided instanceId and relationshipName, using input.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param relationshipName Relationship name
     * @param body The updated relationship metadata
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateARelationshipHeaders>> updateARelationshipWithServiceResponseAsync(String instanceId, String relationshipName, InstancesInstanceIdManageRelationshipsRelationshipNamePutRequest body);

    /**
     * GetSearchConfiguration.
     * Gets the search configuration for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSearchConfiguration(String instanceId);

    /**
     * GetSearchConfiguration.
     * Gets the search configuration for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSearchConfigurationAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetSearchConfiguration.
     * Gets the search configuration for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSearchConfigurationAsync(String instanceId);

    /**
     * GetSearchConfiguration.
     * Gets the search configuration for the instance.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSearchConfigurationHeaders>> getSearchConfigurationWithServiceResponseAsync(String instanceId);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateSearchConfiguration(String instanceId);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateSearchConfigurationAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateSearchConfigurationAsync(String instanceId);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateSearchConfigurationHeaders>> updateSearchConfigurationWithServiceResponseAsync(String instanceId);
    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param body The search configuration for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateSearchConfiguration(String instanceId, InstancesInstanceIdManageSearchPutRequest body);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param body The search configuration for the instance.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateSearchConfigurationAsync(String instanceId, InstancesInstanceIdManageSearchPutRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param body The search configuration for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateSearchConfigurationAsync(String instanceId, InstancesInstanceIdManageSearchPutRequest body);

    /**
     * UpdateSearchConfiguration.
     * UpdateSearchConfiguration.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param body The search configuration for the instance.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateSearchConfigurationHeaders>> updateSearchConfigurationWithServiceResponseAsync(String instanceId, InstancesInstanceIdManageSearchPutRequest body);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllSegments(String instanceId);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllSegmentsAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllSegmentsAsync(String instanceId);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllSegmentsHeaders>> getAllSegmentsWithServiceResponseAsync(String instanceId);
    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param includeHistoricStats Optional parameter to retrieve evaluation history of all the sgements in instanceId.
     * @param historicStatsDays Format - int32. Optional parameter to get number of days evaluation history.
     * @param numberOfSegments Format - int32. Optional parameter to limit the number of segments returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAllSegments(String instanceId, Boolean includeHistoricStats, Integer historicStatsDays, Integer numberOfSegments);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param includeHistoricStats Optional parameter to retrieve evaluation history of all the sgements in instanceId.
     * @param historicStatsDays Format - int32. Optional parameter to get number of days evaluation history.
     * @param numberOfSegments Format - int32. Optional parameter to limit the number of segments returned.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAllSegmentsAsync(String instanceId, Boolean includeHistoricStats, Integer historicStatsDays, Integer numberOfSegments, final ServiceCallback<Object> serviceCallback);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param includeHistoricStats Optional parameter to retrieve evaluation history of all the sgements in instanceId.
     * @param historicStatsDays Format - int32. Optional parameter to get number of days evaluation history.
     * @param numberOfSegments Format - int32. Optional parameter to limit the number of segments returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAllSegmentsAsync(String instanceId, Boolean includeHistoricStats, Integer historicStatsDays, Integer numberOfSegments);

    /**
     * ListAllSegments.
     * Retrieves a list of segment metadata for the provided instanceId.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param includeHistoricStats Optional parameter to retrieve evaluation history of all the sgements in instanceId.
     * @param historicStatsDays Format - int32. Optional parameter to get number of days evaluation history.
     * @param numberOfSegments Format - int32. Optional parameter to limit the number of segments returned.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAllSegmentsHeaders>> getAllSegmentsWithServiceResponseAsync(String instanceId, Boolean includeHistoricStats, Integer historicStatsDays, Integer numberOfSegments);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createASegment(String instanceId);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createASegmentAsync(String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createASegmentAsync(String instanceId);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateASegmentHeaders>> createASegmentWithServiceResponseAsync(String instanceId);
    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Segment metadata to be created
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createASegment(String instanceId, InstancesInstanceIdManageSegmentsPostRequest body);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Segment metadata to be created
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createASegmentAsync(String instanceId, InstancesInstanceIdManageSegmentsPostRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Segment metadata to be created
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createASegmentAsync(String instanceId, InstancesInstanceIdManageSegmentsPostRequest body);

    /**
     * CreateSegment.
     * CreateSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param body New Segment metadata to be created
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateASegmentHeaders>> createASegmentWithServiceResponseAsync(String instanceId, InstancesInstanceIdManageSegmentsPostRequest body);

    /**
     * ActivateSegment.
     * Activate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object activateSegment(String instanceId, String segmentName);

    /**
     * ActivateSegment.
     * Activate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> activateSegmentAsync(String instanceId, String segmentName, final ServiceCallback<Object> serviceCallback);

    /**
     * ActivateSegment.
     * Activate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> activateSegmentAsync(String instanceId, String segmentName);

    /**
     * ActivateSegment.
     * Activate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, ActivateSegmentHeaders>> activateSegmentWithServiceResponseAsync(String instanceId, String segmentName);

    /**
     * DeactivateSegment.
     * Deactivate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deactivateSegment(String instanceId, String segmentName);

    /**
     * DeactivateSegment.
     * Deactivate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deactivateSegmentAsync(String instanceId, String segmentName, final ServiceCallback<Object> serviceCallback);

    /**
     * DeactivateSegment.
     * Deactivate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deactivateSegmentAsync(String instanceId, String segmentName);

    /**
     * DeactivateSegment.
     * Deactivate segment on instanceId with segmentName.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DeactivateSegmentHeaders>> deactivateSegmentWithServiceResponseAsync(String instanceId, String segmentName);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateASegment(String instanceId, String segmentName);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateASegmentAsync(String instanceId, String segmentName, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateASegmentAsync(String instanceId, String segmentName);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateASegmentHeaders>> updateASegmentWithServiceResponseAsync(String instanceId, String segmentName);
    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param body New Segment metadata to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object updateASegment(String instanceId, String segmentName, InstancesInstanceIdManageSegmentsSegmentNamePutRequest body);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param body New Segment metadata to be updated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> updateASegmentAsync(String instanceId, String segmentName, InstancesInstanceIdManageSegmentsSegmentNamePutRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param body New Segment metadata to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> updateASegmentAsync(String instanceId, String segmentName, InstancesInstanceIdManageSegmentsSegmentNamePutRequest body);

    /**
     * UpdateSegments.
     * Updates segment metadata for the provided instanceId and segmentName with segmentMetadata.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param body New Segment metadata to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, UpdateASegmentHeaders>> updateASegmentWithServiceResponseAsync(String instanceId, String segmentName, InstancesInstanceIdManageSegmentsSegmentNamePutRequest body);

    /**
     * DeleteSegment.
     * DeleteSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteSegment(String instanceId, String segmentName);

    /**
     * DeleteSegment.
     * DeleteSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteSegmentAsync(String instanceId, String segmentName, final ServiceCallback<Object> serviceCallback);

    /**
     * DeleteSegment.
     * DeleteSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteSegmentAsync(String instanceId, String segmentName);

    /**
     * DeleteSegment.
     * DeleteSegment.
     *
     * @param instanceId Format - uuid. Customer Insights instance id
     * @param segmentName Unique name of a segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, DeleteSegmentHeaders>> deleteSegmentWithServiceResponseAsync(String instanceId, String segmentName);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAWorkflowJobInformation(String instanceId, String workflowName, String jobId);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAWorkflowJobInformationAsync(String instanceId, String workflowName, String jobId, final ServiceCallback<Object> serviceCallback);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAWorkflowJobInformationAsync(String instanceId, String workflowName, String jobId);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAWorkflowJobInformationHeaders>> getAWorkflowJobInformationWithServiceResponseAsync(String instanceId, String workflowName, String jobId);
    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @param includeTasks Flag to include tasks or not.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAWorkflowJobInformation(String instanceId, String workflowName, String jobId, Boolean includeTasks);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @param includeTasks Flag to include tasks or not.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAWorkflowJobInformationAsync(String instanceId, String workflowName, String jobId, Boolean includeTasks, final ServiceCallback<Object> serviceCallback);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @param includeTasks Flag to include tasks or not.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAWorkflowJobInformationAsync(String instanceId, String workflowName, String jobId, Boolean includeTasks);

    /**
     * GetWorkflowJobInformation.
     * GetWorkflowJobInformation.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @param includeTasks Flag to include tasks or not.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAWorkflowJobInformationHeaders>> getAWorkflowJobInformationWithServiceResponseAsync(String instanceId, String workflowName, String jobId, Boolean includeTasks);

    /**
     * CancelWorkflowJob.
     * Cancel a job.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object cancelAWorkflowJob(String instanceId, String workflowName, String jobId);

    /**
     * CancelWorkflowJob.
     * Cancel a job.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> cancelAWorkflowJobAsync(String instanceId, String workflowName, String jobId, final ServiceCallback<Object> serviceCallback);

    /**
     * CancelWorkflowJob.
     * Cancel a job.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> cancelAWorkflowJobAsync(String instanceId, String workflowName, String jobId);

    /**
     * CancelWorkflowJob.
     * Cancel a job.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param jobId Format - uuid. The job id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CancelAWorkflowJobHeaders>> cancelAWorkflowJobWithServiceResponseAsync(String instanceId, String workflowName, String jobId);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getListOfRecentWorkflowJobs(String instanceId, String workflowName);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getListOfRecentWorkflowJobsAsync(String instanceId, String workflowName, final ServiceCallback<Object> serviceCallback);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getListOfRecentWorkflowJobsAsync(String instanceId, String workflowName);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetListOfRecentWorkflowJobsHeaders>> getListOfRecentWorkflowJobsWithServiceResponseAsync(String instanceId, String workflowName);
    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of job informations to retrieve.
     * @param includeTasks Flag to include tasks or not.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getListOfRecentWorkflowJobs(String instanceId, String workflowName, Integer top, Boolean includeTasks);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of job informations to retrieve.
     * @param includeTasks Flag to include tasks or not.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getListOfRecentWorkflowJobsAsync(String instanceId, String workflowName, Integer top, Boolean includeTasks, final ServiceCallback<Object> serviceCallback);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of job informations to retrieve.
     * @param includeTasks Flag to include tasks or not.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getListOfRecentWorkflowJobsAsync(String instanceId, String workflowName, Integer top, Boolean includeTasks);

    /**
     * ListWorkFlowJobs.
     * Retrieves a list of recent job information.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of job informations to retrieve.
     * @param includeTasks Flag to include tasks or not.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetListOfRecentWorkflowJobsHeaders>> getListOfRecentWorkflowJobsWithServiceResponseAsync(String instanceId, String workflowName, Integer top, Boolean includeTasks);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object submitAWorkflowJob(String instanceId, String workflowName);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> submitAWorkflowJobAsync(String instanceId, String workflowName, final ServiceCallback<Object> serviceCallback);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> submitAWorkflowJobAsync(String instanceId, String workflowName);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, SubmitAWorkflowJobHeaders>> submitAWorkflowJobWithServiceResponseAsync(String instanceId, String workflowName);
    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @param body Job Creation Request.
     * @param operationType The workflow operation type.
     * @param identifiers A list of workflow identifiers.
     * @param forceRunRequested Whether to request a force run.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object submitAWorkflowJob(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameJobsPostRequest body, String operationType, List<String> identifiers, Boolean forceRunRequested);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @param body Job Creation Request.
     * @param operationType The workflow operation type.
     * @param identifiers A list of workflow identifiers.
     * @param forceRunRequested Whether to request a force run.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> submitAWorkflowJobAsync(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameJobsPostRequest body, String operationType, List<String> identifiers, Boolean forceRunRequested, final ServiceCallback<Object> serviceCallback);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @param body Job Creation Request.
     * @param operationType The workflow operation type.
     * @param identifiers A list of workflow identifiers.
     * @param forceRunRequested Whether to request a force run.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> submitAWorkflowJobAsync(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameJobsPostRequest body, String operationType, List<String> identifiers, Boolean forceRunRequested);

    /**
     * SubmitWorkflowJob.
     * Submits a workflow of OperationTypeoperationType for the instance specified in instanceId.
     Optionally takes a list of identifiers, only if operationType is not OperationType.All and a flag
     forceRunRequested indicating whether to force run.
     *
     * @param instanceId Format - uuid. The Customer Insights instance id.
     * @param workflowName The workflow name.
     * @param body Job Creation Request.
     * @param operationType The workflow operation type.
     * @param identifiers A list of workflow identifiers.
     * @param forceRunRequested Whether to request a force run.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, SubmitAWorkflowJobHeaders>> submitAWorkflowJobWithServiceResponseAsync(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameJobsPostRequest body, String operationType, List<String> identifiers, Boolean forceRunRequested);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getListOfWorkflowTaskInformationHistory(String instanceId, String workflowName);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getListOfWorkflowTaskInformationHistoryAsync(String instanceId, String workflowName, final ServiceCallback<Object> serviceCallback);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getListOfWorkflowTaskInformationHistoryAsync(String instanceId, String workflowName);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetListOfWorkflowTaskInformationHistoryHeaders>> getListOfWorkflowTaskInformationHistoryWithServiceResponseAsync(String instanceId, String workflowName);
    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of task informations to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getListOfWorkflowTaskInformationHistory(String instanceId, String workflowName, Integer top);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of task informations to retrieve.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getListOfWorkflowTaskInformationHistoryAsync(String instanceId, String workflowName, Integer top, final ServiceCallback<Object> serviceCallback);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of task informations to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getListOfWorkflowTaskInformationHistoryAsync(String instanceId, String workflowName, Integer top);

    /**
     * ListWorkflowHistory.
     * Retrieves a list of historic task information for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The name of the workflow.
     * @param top Format - int32. The number of task informations to retrieve.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetListOfWorkflowTaskInformationHistoryHeaders>> getListOfWorkflowTaskInformationHistoryWithServiceResponseAsync(String instanceId, String workflowName, Integer top);

    /**
     * GetWorkflowStatus.
     * Gets the current status for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getWorkflowStatus(String instanceId, String workflowName);

    /**
     * GetWorkflowStatus.
     * Gets the current status for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The workflow name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getWorkflowStatusAsync(String instanceId, String workflowName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetWorkflowStatus.
     * Gets the current status for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getWorkflowStatusAsync(String instanceId, String workflowName);

    /**
     * GetWorkflowStatus.
     * Gets the current status for a workflow.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName The workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetWorkflowStatusHeaders>> getWorkflowStatusWithServiceResponseAsync(String instanceId, String workflowName);

    /**
     * ListSupportedTimezones.
     * Gets a list of supported timezones for creating workflow schedules.
     *
     * @param workflowName Any workflow name.
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getSupportedTimezones(String workflowName, String instanceId);

    /**
     * ListSupportedTimezones.
     * Gets a list of supported timezones for creating workflow schedules.
     *
     * @param workflowName Any workflow name.
     * @param instanceId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getSupportedTimezonesAsync(String workflowName, String instanceId, final ServiceCallback<Object> serviceCallback);

    /**
     * ListSupportedTimezones.
     * Gets a list of supported timezones for creating workflow schedules.
     *
     * @param workflowName Any workflow name.
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getSupportedTimezonesAsync(String workflowName, String instanceId);

    /**
     * ListSupportedTimezones.
     * Gets a list of supported timezones for creating workflow schedules.
     *
     * @param workflowName Any workflow name.
     * @param instanceId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetSupportedTimezonesHeaders>> getSupportedTimezonesWithServiceResponseAsync(String workflowName, String instanceId);

    /**
     * ListAllWorkflowSchedules.
     * ListAllWorkflowSchedules.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getWorkflowSchedules(String instanceId, String workflowName);

    /**
     * ListAllWorkflowSchedules.
     * ListAllWorkflowSchedules.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getWorkflowSchedulesAsync(String instanceId, String workflowName, final ServiceCallback<Object> serviceCallback);

    /**
     * ListAllWorkflowSchedules.
     * ListAllWorkflowSchedules.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getWorkflowSchedulesAsync(String instanceId, String workflowName);

    /**
     * ListAllWorkflowSchedules.
     * ListAllWorkflowSchedules.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetWorkflowSchedulesHeaders>> getWorkflowSchedulesWithServiceResponseAsync(String instanceId, String workflowName);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createWorkflowRefreshSchedule(String instanceId, String workflowName);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createWorkflowRefreshScheduleAsync(String instanceId, String workflowName, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createWorkflowRefreshScheduleAsync(String instanceId, String workflowName);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateWorkflowRefreshScheduleHeaders>> createWorkflowRefreshScheduleWithServiceResponseAsync(String instanceId, String workflowName);
    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @param body A schedule object to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createWorkflowRefreshSchedule(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameSchedulesPostRequest body);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @param body A schedule object to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createWorkflowRefreshScheduleAsync(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameSchedulesPostRequest body, final ServiceCallback<Object> serviceCallback);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @param body A schedule object to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createWorkflowRefreshScheduleAsync(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameSchedulesPostRequest body);

    /**
     * CreateWorkflowRefreshSchedule.
     * Create a workflow refresh schedule.
     *
     * @param instanceId Format - uuid. The instance id.
     * @param workflowName Any workflow name.
     * @param body A schedule object to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, CreateWorkflowRefreshScheduleHeaders>> createWorkflowRefreshScheduleWithServiceResponseAsync(String instanceId, String workflowName, InstancesInstanceIdWorkflowsWorkflowNameSchedulesPostRequest body);

    /**
     * GetEntityProfile.
     * Gets the entityProfile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object getAnEntityProfile(String instanceId, String qualifiedEntityName);

    /**
     * GetEntityProfile.
     * Gets the entityProfile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> getAnEntityProfileAsync(String instanceId, String qualifiedEntityName, final ServiceCallback<Object> serviceCallback);

    /**
     * GetEntityProfile.
     * Gets the entityProfile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> getAnEntityProfileAsync(String instanceId, String qualifiedEntityName);

    /**
     * GetEntityProfile.
     * Gets the entityProfile for the entity.
     *
     * @param instanceId Format - uuid. Customer Insights instance id.
     * @param qualifiedEntityName Qualified Entity Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponseWithHeaders<Object, GetAnEntityProfileHeaders>> getAnEntityProfileWithServiceResponseAsync(String instanceId, String qualifiedEntityName);

}
