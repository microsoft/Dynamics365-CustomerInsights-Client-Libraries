# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class OnDemandJobRequest(Model):
    """OnDemandJobRequest.

    :param graph_name:
    :type graph_name: str
    :param operation_type: Possible values include: 'none', 'ingestion',
     'derivedEntity', 'hierarchy', 'dataPreparation', 'map',
     'realtimeM3Search', 'match', 'merge', 'profileStore', 'search',
     'activity', 'contact', 'attributeMeasures', 'entityMeasures', 'measures',
     'segmentation', 'segmentMembership', 'enrichment', 'preEnrichment',
     'transform', 'intelligence', 'aiBuilder', 'insights', 'export',
     'modelManagement', 'relationship', 'roleAssignment', 'analysis',
     'semanticEntity', 'all'
    :type operation_type: str or ~dynamics.customerinsights.api.models.enum
    :param submission_kind: Possible values include: 'onDemand', 'scheduled'
    :type submission_kind: str or ~dynamics.customerinsights.api.models.enum
    :param job_type: Possible values include: 'full', 'incremental'
    :type job_type: str or ~dynamics.customerinsights.api.models.enum
    :param identifiers:
    :type identifiers: list[str]
    :param force_run_requested:
    :type force_run_requested: bool
    :param input_refresh_mode: Possible values include:
     'FailedOrModifiedRecursive', 'FailedRecursive', 'FailedOrModified',
     'Failed', 'None'
    :type input_refresh_mode: str or
     ~dynamics.customerinsights.api.models.enum
    :param options:
    :type options: ~dynamics.customerinsights.api.models.GraphJobOptions
    """

    _attribute_map = {
        'graph_name': {'key': 'graphName', 'type': 'str'},
        'operation_type': {'key': 'operationType', 'type': 'str'},
        'submission_kind': {'key': 'submissionKind', 'type': 'str'},
        'job_type': {'key': 'jobType', 'type': 'str'},
        'identifiers': {'key': 'identifiers', 'type': '[str]'},
        'force_run_requested': {'key': 'forceRunRequested', 'type': 'bool'},
        'input_refresh_mode': {'key': 'inputRefreshMode', 'type': 'str'},
        'options': {'key': 'options', 'type': 'GraphJobOptions'},
    }

    def __init__(self, **kwargs):
        super(OnDemandJobRequest, self).__init__(**kwargs)
        self.graph_name = kwargs.get('graph_name', None)
        self.operation_type = kwargs.get('operation_type', None)
        self.submission_kind = kwargs.get('submission_kind', None)
        self.job_type = kwargs.get('job_type', None)
        self.identifiers = kwargs.get('identifiers', None)
        self.force_run_requested = kwargs.get('force_run_requested', None)
        self.input_refresh_mode = kwargs.get('input_refresh_mode', None)
        self.options = kwargs.get('options', None)
