# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class IRelationshipMetadata(Model):
    """Represents Relationship Metadata.

    :param name: Unique Name for relationship
    :type name: str
    :param friendly_name: User Friendly Name for relationship
    :type friendly_name: str
    :param from_attribute:
    :type from_attribute:
     ~dynamics.customerinsights.api.models.IAttributeMetadata
    :param to_attribute:
    :type to_attribute:
     ~dynamics.customerinsights.api.models.IAttributeMetadata
    :param relationship_type: Possible values include:
     'singleKeyRelationshipOrigin', 'singleKeyRelationshipDestination',
     'dataSourceLineageOrigin', 'dataSourceLineageDestination'
    :type relationship_type: str or ~dynamics.customerinsights.api.models.enum
    :param data_source_entity:
    :type data_source_entity:
     ~dynamics.customerinsights.api.models.IEntityMetadata
    :param data_source_mapping_attributes: List of data source mapping
     attributes
    :type data_source_mapping_attributes:
     list[~dynamics.customerinsights.api.models.IAttributeMetadata]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'friendly_name': {'key': 'friendlyName', 'type': 'str'},
        'from_attribute': {'key': 'fromAttribute', 'type': 'IAttributeMetadata'},
        'to_attribute': {'key': 'toAttribute', 'type': 'IAttributeMetadata'},
        'relationship_type': {'key': 'relationshipType', 'type': 'str'},
        'data_source_entity': {'key': 'dataSourceEntity', 'type': 'IEntityMetadata'},
        'data_source_mapping_attributes': {'key': 'dataSourceMappingAttributes', 'type': '[IAttributeMetadata]'},
    }

    def __init__(self, **kwargs):
        super(IRelationshipMetadata, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.friendly_name = kwargs.get('friendly_name', None)
        self.from_attribute = kwargs.get('from_attribute', None)
        self.to_attribute = kwargs.get('to_attribute', None)
        self.relationship_type = kwargs.get('relationship_type', None)
        self.data_source_entity = kwargs.get('data_source_entity', None)
        self.data_source_mapping_attributes = kwargs.get('data_source_mapping_attributes', None)
