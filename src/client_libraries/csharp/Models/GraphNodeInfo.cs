// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Dynamics.CustomerInsights.Api.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class GraphNodeInfo
    {
        /// <summary>
        /// Initializes a new instance of the GraphNodeInfo class.
        /// </summary>
        public GraphNodeInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphNodeInfo class.
        /// </summary>
        /// <param name="operationType">Possible values include: 'none',
        /// 'ingestion', 'derivedEntity', 'dataPreparation', 'map', 'match',
        /// 'merge', 'profileStore', 'search', 'activity', 'attributeMeasures',
        /// 'entityMeasures', 'measures', 'segmentation', 'enrichment',
        /// 'intelligence', 'aiBuilder', 'insights', 'export',
        /// 'modelManagement', 'relationship', 'roleAssignment', 'analysis',
        /// 'all'</param>
        /// <param name="subType">Possible values include: 'noSubType',
        /// 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel',
        /// 'singleActivityMapping', 'powerPlatform'</param>
        /// <param name="taskStatus">Possible values include: 'queued',
        /// 'needsUpdate', 'running', 'failed', 'timedOut', 'aborted',
        /// 'deleted', 'successful', 'skipped'</param>
        public GraphNodeInfo(string operationType = default(string), string subType = default(string), string identifier = default(string), string friendlyName = default(string), IList<System.Guid?> jobIds = default(IList<System.Guid?>), string taskStatus = default(string), IList<System.Guid?> lastSuccessJobIds = default(IList<System.Guid?>), System.DateTime? endTimestamp = default(System.DateTime?), System.DateTime? lastSuccessfulTimestamp = default(System.DateTime?), CIResult ciError = default(CIResult), IList<CIResult> ciErrors = default(IList<CIResult>), CustomTaskInformation additionalInfo = default(CustomTaskInformation), SelectionReason selectionReason = default(SelectionReason))
        {
            OperationType = operationType;
            SubType = subType;
            Identifier = identifier;
            FriendlyName = friendlyName;
            JobIds = jobIds;
            TaskStatus = taskStatus;
            LastSuccessJobIds = lastSuccessJobIds;
            EndTimestamp = endTimestamp;
            LastSuccessfulTimestamp = lastSuccessfulTimestamp;
            CiError = ciError;
            CiErrors = ciErrors;
            AdditionalInfo = additionalInfo;
            SelectionReason = selectionReason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets possible values include: 'none', 'ingestion',
        /// 'derivedEntity', 'dataPreparation', 'map', 'match', 'merge',
        /// 'profileStore', 'search', 'activity', 'attributeMeasures',
        /// 'entityMeasures', 'measures', 'segmentation', 'enrichment',
        /// 'intelligence', 'aiBuilder', 'insights', 'export',
        /// 'modelManagement', 'relationship', 'roleAssignment', 'analysis',
        /// 'all'
        /// </summary>
        [JsonProperty(PropertyName = "operationType")]
        public string OperationType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'noSubType',
        /// 'templatedMeasures', 'createAnalysisModel', 'linkAnalysisModel',
        /// 'singleActivityMapping', 'powerPlatform'
        /// </summary>
        [JsonProperty(PropertyName = "subType")]
        public string SubType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "jobIds")]
        public IList<System.Guid?> JobIds { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'queued', 'needsUpdate',
        /// 'running', 'failed', 'timedOut', 'aborted', 'deleted',
        /// 'successful', 'skipped'
        /// </summary>
        [JsonProperty(PropertyName = "taskStatus")]
        public string TaskStatus { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastSuccessJobIds")]
        public IList<System.Guid?> LastSuccessJobIds { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "endTimestamp")]
        public System.DateTime? EndTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "lastSuccessfulTimestamp")]
        public System.DateTime? LastSuccessfulTimestamp { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ciError")]
        public CIResult CiError { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ciErrors")]
        public IList<CIResult> CiErrors { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "additionalInfo")]
        public CustomTaskInformation AdditionalInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selectionReason")]
        public SelectionReason SelectionReason { get; set; }

    }
}
