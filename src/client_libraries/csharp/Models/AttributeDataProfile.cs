// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Dynamics.CustomerInsights.Api.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Attribute data profile
    /// </summary>
    public partial class AttributeDataProfile
    {
        /// <summary>
        /// Initializes a new instance of the AttributeDataProfile class.
        /// </summary>
        public AttributeDataProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttributeDataProfile class.
        /// </summary>
        /// <param name="valueCounts">Represents Distribution of the top 100
        /// values.</param>
        /// <param name="histogram">Represents histogram information Ordered
        /// from smallest to largest bin.</param>
        /// <param name="qualifiedEntityName">Qualified entity name.</param>
        /// <param name="attributeName">Attribute name.</param>
        /// <param name="min">Minimum value.</param>
        /// <param name="max">Maximum value.</param>
        /// <param name="count">Total row count.</param>
        /// <param name="missingCount">Row count of missing values.</param>
        /// <param name="errorCount">Number of error values.</param>
        /// <param name="uniqueValueCount">Number of unique values.</param>
        /// <param name="profilingDate">Profiling date</param>
        /// <param name="isSuggestedPrimaryKey">Represents a value indicating
        /// whether this attribute can be used as a primary key of the
        /// entity</param>
        /// <param name="checkIfExactStats">Represents a value indicating
        /// whether we calculate exact or approx stats</param>
        public AttributeDataProfile(IList<ValueCount> valueCounts = default(IList<ValueCount>), IList<HistogramBin> histogram = default(IList<HistogramBin>), string qualifiedEntityName = default(string), string attributeName = default(string), object min = default(object), object max = default(object), long? count = default(long?), long? missingCount = default(long?), long? errorCount = default(long?), Quantiles quantiles = default(Quantiles), Moments moments = default(Moments), long? uniqueValueCount = default(long?), System.DateTime? profilingDate = default(System.DateTime?), bool? isSuggestedPrimaryKey = default(bool?), object checkIfExactStats = default(object))
        {
            ValueCounts = valueCounts;
            Histogram = histogram;
            QualifiedEntityName = qualifiedEntityName;
            AttributeName = attributeName;
            Min = min;
            Max = max;
            Count = count;
            MissingCount = missingCount;
            ErrorCount = errorCount;
            Quantiles = quantiles;
            Moments = moments;
            UniqueValueCount = uniqueValueCount;
            ProfilingDate = profilingDate;
            IsSuggestedPrimaryKey = isSuggestedPrimaryKey;
            CheckIfExactStats = checkIfExactStats;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets represents Distribution of the top 100 values.
        /// </summary>
        [JsonProperty(PropertyName = "valueCounts")]
        public IList<ValueCount> ValueCounts { get; set; }

        /// <summary>
        /// Gets or sets represents histogram information Ordered from smallest
        /// to largest bin.
        /// </summary>
        [JsonProperty(PropertyName = "histogram")]
        public IList<HistogramBin> Histogram { get; set; }

        /// <summary>
        /// Gets or sets qualified entity name.
        /// </summary>
        [JsonProperty(PropertyName = "qualifiedEntityName")]
        public string QualifiedEntityName { get; set; }

        /// <summary>
        /// Gets or sets attribute name.
        /// </summary>
        [JsonProperty(PropertyName = "attributeName")]
        public string AttributeName { get; set; }

        /// <summary>
        /// Gets or sets minimum value.
        /// </summary>
        [JsonProperty(PropertyName = "min")]
        public object Min { get; set; }

        /// <summary>
        /// Gets or sets maximum value.
        /// </summary>
        [JsonProperty(PropertyName = "max")]
        public object Max { get; set; }

        /// <summary>
        /// Gets or sets total row count.
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public long? Count { get; set; }

        /// <summary>
        /// Gets or sets row count of missing values.
        /// </summary>
        [JsonProperty(PropertyName = "missingCount")]
        public long? MissingCount { get; set; }

        /// <summary>
        /// Gets or sets number of error values.
        /// </summary>
        [JsonProperty(PropertyName = "errorCount")]
        public long? ErrorCount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantiles")]
        public Quantiles Quantiles { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "moments")]
        public Moments Moments { get; set; }

        /// <summary>
        /// Gets or sets number of unique values.
        /// </summary>
        [JsonProperty(PropertyName = "uniqueValueCount")]
        public long? UniqueValueCount { get; set; }

        /// <summary>
        /// Gets or sets profiling date
        /// </summary>
        [JsonProperty(PropertyName = "profilingDate")]
        public System.DateTime? ProfilingDate { get; set; }

        /// <summary>
        /// Gets or sets represents a value indicating whether this attribute
        /// can be used as a primary key of the entity
        /// </summary>
        [JsonProperty(PropertyName = "isSuggestedPrimaryKey")]
        public bool? IsSuggestedPrimaryKey { get; set; }

        /// <summary>
        /// Gets or sets represents a value indicating whether we calculate
        /// exact or approx stats
        /// </summary>
        [JsonProperty(PropertyName = "checkIfExactStats")]
        public object CheckIfExactStats { get; set; }

    }
}
