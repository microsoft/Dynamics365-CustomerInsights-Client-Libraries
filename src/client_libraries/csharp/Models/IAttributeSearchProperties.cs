// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Dynamics.CustomerInsights.Api.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents seachable attribute properties
    /// </summary>
    public partial class IAttributeSearchProperties
    {
        /// <summary>
        /// Initializes a new instance of the IAttributeSearchProperties class.
        /// </summary>
        public IAttributeSearchProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IAttributeSearchProperties class.
        /// </summary>
        /// <param name="isSearchable">Gets a value indicating whether the
        /// attribute supports full text search.</param>
        /// <param name="isFilterable">Gets a value indicating whether the
        /// attribute supports filtering.</param>
        /// <param name="isFacetable">Gets a value indicating whether the
        /// attribute can be included as facet results.</param>
        /// <param name="isSortable">Gets a value indicating whether the
        /// attribute can be included in orderby directives.</param>
        /// <param name="facetSpecification">Gets an optional specification for
        /// search faceting used at query time (advanced).
        /// this is the part behind the comma in the examples below.
        /// bucket facet: "price,interval:10"
        /// other type: "listPrice,values:10|25|100|500|1000|2500"
        /// value facet: city,count:5</param>
        public IAttributeSearchProperties(bool? isSearchable = default(bool?), bool? isFilterable = default(bool?), bool? isFacetable = default(bool?), bool? isSortable = default(bool?), string facetSpecification = default(string))
        {
            IsSearchable = isSearchable;
            IsFilterable = isFilterable;
            IsFacetable = isFacetable;
            IsSortable = isSortable;
            FacetSpecification = facetSpecification;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets a value indicating whether the attribute supports full text
        /// search.
        /// </summary>
        [JsonProperty(PropertyName = "isSearchable")]
        public bool? IsSearchable { get; set; }

        /// <summary>
        /// Gets a value indicating whether the attribute supports filtering.
        /// </summary>
        [JsonProperty(PropertyName = "isFilterable")]
        public bool? IsFilterable { get; set; }

        /// <summary>
        /// Gets a value indicating whether the attribute can be included as
        /// facet results.
        /// </summary>
        [JsonProperty(PropertyName = "isFacetable")]
        public bool? IsFacetable { get; set; }

        /// <summary>
        /// Gets a value indicating whether the attribute can be included in
        /// orderby directives.
        /// </summary>
        [JsonProperty(PropertyName = "isSortable")]
        public bool? IsSortable { get; set; }

        /// <summary>
        /// Gets an optional specification for search faceting used at query
        /// time (advanced).
        /// this is the part behind the comma in the examples below.
        /// bucket facet: "price,interval:10"
        /// other type: "listPrice,values:10|25|100|500|1000|2500"
        /// value facet: city,count:5
        /// </summary>
        [JsonProperty(PropertyName = "facetSpecification")]
        public string FacetSpecification { get; set; }

    }
}
