/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents a base Segment Query.
 *
 */
class SegmentMembershipCriteria {
  /**
   * Create a SegmentMembershipCriteria.
   * @property {string} [kind] Possible values include: 'post', 'default',
   * 'consent', 'engagement'
   * @property {string} [logicalOperator] Possible values include: 'and', 'or'
   * @property {string} [attribute] Gets the Attribute of the entity used in
   * segment criteria.
   * @property {string} [comparisonOperator] Possible values include: 'equals',
   * 'notEquals', 'greaterThan', 'greaterThanOrEqualTo', 'lessThan',
   * 'lessThanOrEqualTo', 'any', 'contains', 'startsWith', 'endsWith',
   * 'isNull', 'isNotNull', 'all', 'isIn', 'isWithinLast', 'isBetween',
   * 'isNotBetween', 'yearToDate', 'dayOf', 'monthOf', 'yearOf', 'dayOfWeek',
   * 'timeAt', 'childOf', 'parentOf'
   * @property {array} [childCriterias] Gets the list of Child criteria of
   * segment.
   * @property {string} [value] Gets the Value in criteria.
   * @property {boolean} [ignoreCase] Gets a value indicating whether case is
   * ignored for this criteria.
   * @property {array} [listOfValues] Gets the list of values in criteria.
   * @property {boolean} [isTime] flag set to true if entries are of time
   * format
   */
  constructor() {
  }

  /**
   * Defines the metadata of SegmentMembershipCriteria
   *
   * @returns {object} metadata of SegmentMembershipCriteria
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SegmentMembershipCriteria',
      type: {
        name: 'Composite',
        className: 'SegmentMembershipCriteria',
        modelProperties: {
          kind: {
            required: false,
            serializedName: 'kind',
            type: {
              name: 'String'
            }
          },
          logicalOperator: {
            required: false,
            serializedName: 'logicalOperator',
            type: {
              name: 'String'
            }
          },
          attribute: {
            required: false,
            serializedName: 'attribute',
            type: {
              name: 'String'
            }
          },
          comparisonOperator: {
            required: false,
            serializedName: 'comparisonOperator',
            type: {
              name: 'String'
            }
          },
          childCriterias: {
            required: false,
            serializedName: 'childCriterias',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'SegmentMembershipCriteriaElementType',
                  type: {
                    name: 'Composite',
                    className: 'SegmentMembershipCriteria'
                  }
              }
            }
          },
          value: {
            required: false,
            serializedName: 'value',
            type: {
              name: 'String'
            }
          },
          ignoreCase: {
            required: false,
            nullable: true,
            serializedName: 'ignoreCase',
            type: {
              name: 'Boolean'
            }
          },
          listOfValues: {
            required: false,
            serializedName: 'listOfValues',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'StringElementType',
                  type: {
                    name: 'String'
                  }
              }
            }
          },
          isTime: {
            required: false,
            nullable: true,
            serializedName: 'isTime',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = SegmentMembershipCriteria;
