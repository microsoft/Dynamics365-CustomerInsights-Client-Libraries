/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents metadata for a measure (or KPI).
 *
 */
class MeasureMetadata {
  /**
   * Create a MeasureMetadata.
   * @property {string} [displayName]
   * @property {string} [name] Unique name of the measure
   * @property {string} [description] Description of the measure.
   * @property {object} [definition]
   * @property {string} [definition.kind] Possible values include: 'entity',
   * 'attribute'
   * @property {boolean} [definition.isScalar] Gets a value indicating whether
   * the current measure is a scalar measure e doesn't have any dimensions
   * @property {array} [definition.linkedEntities] Gets list of linked entities
   * associated with the measure.
   * @property {array} [definition.variables] Gets list of variables (computed
   * columns) for the measure.
   * @property {object} [definition.filters]
   * @property {string} [definition.filters.kind] Possible values include:
   * 'constant', 'property', 'memberAccess', 'functionCall', 'and', 'or',
   * 'equals', 'notEquals', 'greaterThan', 'greaterThanOrEqualTo', 'lessThan',
   * 'lessThanOrEqualTo', 'contains', 'startsWith', 'endsWith', 'isNull',
   * 'isNotNull', 'negate', 'add', 'subtract', 'multiply', 'divide', 'modulo',
   * 'exponent', 'today', 'now'
   * @property {object} [definition.filteringCriteria]
   * @property {string} [definition.filteringCriteria.kind] Possible values
   * include: 'post', 'default', 'consent', 'engagement'
   * @property {string} [definition.filteringCriteria.logicalOperator] Possible
   * values include: 'and', 'or'
   * @property {string} [definition.filteringCriteria.attribute] Gets the
   * Attribute of the entity used in segment criteria.
   * @property {string} [definition.filteringCriteria.comparisonOperator]
   * Possible values include: 'equals', 'notEquals', 'greaterThan',
   * 'greaterThanOrEqualTo', 'lessThan', 'lessThanOrEqualTo', 'any',
   * 'contains', 'startsWith', 'endsWith', 'isNull', 'isNotNull', 'all',
   * 'isIn', 'isWithinLast', 'isBetween', 'isNotBetween', 'yearToDate',
   * 'dayOf', 'monthOf', 'yearOf', 'dayOfWeek', 'timeAt', 'childOf', 'parentOf'
   * @property {array} [definition.filteringCriteria.childCriterias] Gets the
   * list of Child criteria of segment.
   * @property {string} [definition.filteringCriteria.value] Gets the Value in
   * criteria.
   * @property {boolean} [definition.filteringCriteria.ignoreCase] Gets a value
   * indicating whether case is ignored for this criteria.
   * @property {array} [definition.filteringCriteria.listOfValues] Gets the
   * list of values in criteria.
   * @property {boolean} [definition.filteringCriteria.isTime] flag set to true
   * if entries are of time format
   * @property {array} [definition.dimensions] Gets list of dimensions with the
   * measure.
   * @property {array} [definition.aggregates] Gets list of aggregates of the
   * measure.
   * @property {boolean} [definition.isProfile] Gets a value indicating whether
   * the current measure is a profile measure
   * @property {string} [definition.measureQuerySql] Gets the user specified
   * custom SQL query.
   * @property {string} [definition.type] Possible values include:
   * 'structured', 'manual'
   * @property {boolean} [definition.isManualQueryScalar] Gets the indicating
   * whether the Business Measure is Scalar or not.
   * @property {array} [definition.dependencies] Gets the list of measures that
   * this measure depends on.
   * @property {object} [latestEvaluation]
   * @property {uuid} [latestEvaluation.lastSuccessfulRunId]
   * @property {string} [latestEvaluation.state] Possible values include:
   * 'none', 'running', 'failed', 'completed'
   * @property {date} [latestEvaluation.endTime] Evaluation completion time.
   * @property {string} [latestEvaluation.error] Error Information (if any)
   * that occured during the measure evaluation.
   * @property {object} [output]
   * @property {object} [output.values] Output folder path for the evaluation.
   * @property {string} [output.measureName]
   * @property {date} [output.evaluationTime] Gets the evaluation start time.
   * @property {object} [evaluationStats]
   * @property {date} [evaluationStats.lastSuccessful] Last successful
   * evaluation
   * @property {number} [evaluationStats.consecutiveFailureCount] Represents
   * Number of consecutive failures
   * @property {object} [errorDescription]
   * @property {string} [errorDescription.value]
   * @property {string} [errorDescription.key] Possible values include:
   * 'activityMappingDuplicateMappingOnEntity', 'activityMappingEmptyInput',
   * 'activityMappingInvalidKeyAttribute',
   * 'activityMappingInvalidRelationshipAttribute',
   * 'activityMappingInvalidStartEndTimeField',
   * 'activityMappingInvalidStartTimeFieldValue', 'apiInternalError',
   * 'apiVersionNotSupported', 'authEmptyAuthorizationCode',
   * 'authEmptyAuthorizationCodeError', 'authEmptyBearerToken',
   * 'authEmptyBearerTokenError', 'authEmptyRedirect', 'authEmptyRedirectUrl',
   * 'authEmptyRefreshToken', 'authEmptyState', 'authInvalidApp',
   * 'authInvalidAppType', 'authInvalidToken', 'authUserHasC360LicenseError',
   * 'configurationControllerMissingInput', 'customer360ApiInvalidIdentity',
   * 'customer360ApiInvalidTenantIdClaims',
   * 'customer360ApiInvalidUserIdClaims', 'dataRefreshInvalidScheduleRequest',
   * 'dataSourceCreateAlreadyExistError', 'dataSourceModelAlreadyExistError',
   * 'dataSourceDataSourceCanNotDelete', 'dataSourceDataSourceDeleted',
   * 'dataSourceDataSourceNotFound', 'dataSourceDuplicateDataSourceName',
   * 'dataSourceEmptyDataSource', 'dataSourceEmptyDataSourceName',
   * 'dataSourceEmptyDataSourceNameError', 'dataSourceEmptyAttributeError',
   * 'dataLakeAccountInvalidError', 'dataLakeSecretInvalidError',
   * 'dataSourceModelNotFoundError', 'modelDataTypeError',
   * 'modelDataConvertError', 'resourceMetadataNotFoundError',
   * 'dataSourceInactiveInstance', 'dataSourceInstanceNotFound',
   * 'dataSourceCreationFailed', 'dataSourceInvalidDataSourceName',
   * 'dataSourceInvalidDataSourceNameCharacter',
   * 'dataSourceInvalidEntityNames', 'dataSourceMetadataExceedsLimit',
   * 'dataSourceNotFound', 'dataSourceNotProvisioned',
   * 'dataSourceRefreshTimeout', 'dataSourceUpdateAlreadyExistError',
   * 'dataSourceUpdateDependenciesError', 'datasourceIngestionUnexpectedError',
   * 'dynamics365EmptyHeader', 'entityDataControllerContentType',
   * 'entityMetadataCanNotMarkAttribute', 'entityMetadataCanNotUpdateEntity',
   * 'entityMetadataCanNotUpdateEntityOfActivityType',
   * 'entityMetadataForAttributeNotFoundForEntity',
   * 'entityMetadataNotFoundForEntity', 'failedToSubmiProfileStoreJob',
   * 'gdprDeleteOldSnapshotsConfiguratonError',
   * 'gdprDeleteOldSnapshotsNonC360DataflowsError', 'graphApiEmptySearchTerm',
   * 'graphApiPrincipalIdMissingInRequest', 'graphApiPrincipalIdsExceedslimit',
   * 'graphApiPrincipalIdsExceedslimitError', 'graphApiTopLimitError',
   * 'graphApiGroupDirectoryInfoFailed', 'graphApiUserDirectoryInfoFailed',
   * 'instanceNoAssignmentsInRequest', 'instanceUserSettingsMissing',
   * 'instancePreferredLanguageMissing',
   * 'instancePreferredRegionalFormatMissing', 'invalidDataSourceType',
   * 'invocationBadRequestInReadingHeaderInfo', 'invocationFailedBindToMethod',
   * 'invocationUnsupportedMediaType',
   * 'measuresProcessingOrchestrationSkipMeasuresAndNotify',
   * 'nullOrEmptyInstanceId', 'offlineGraphIngestionOrchestrationNotify',
   * 'segmentEvaluationOrchestrationNotify',
   * 'profileStoreIngestionFailedWithJobInfo',
   * 'profileStoreIngestionOrchestrationFailed',
   * 'profileStoreOrchestrationSuccessful',
   * 'publicMetadataControllerAnonymousType', 'rbacAADDirectoryObjectNotFound',
   * 'rbacCanNotRevokePermissionFromInstance',
   * 'rbacDeletedRoleAssignmentsFromUser', 'rbacInvalidRole',
   * 'rbacRoleIsNotValid', 'rbacUnsupportedPrincipalType', 'rbacUserNotFound',
   * 'refreshBackgroundTaskRunningError', 'refreshConflationCancelled',
   * 'refreshConflationMetadataNotFound', 'refreshConflationJobFailed',
   * 'refreshEnrichmentMetadataNotFound', 'refreshEnrichmentMisconfigured',
   * 'refreshEnrichmentRequestExceeded', 'refreshEnrichmentRequestThrottling',
   * 'refreshExportCancelled', 'refreshExportCompleted', 'refreshExportFailed',
   * 'refreshExportRequestThrottling', 'refreshExportSkipped',
   * 'refreshMatchRequestThrotling',
   * 'refreshMeasuresEvaluationRequestThrottling',
   * 'refreshMergeRequestThrotling', 'refreshPrerequisitesUnmetError',
   * 'refreshRunningOrchestrationNotFound', 'resourceBuilderFailure',
   * 'segmentAdvancedEditorNotEnabled', 'staleMatchMetadataError',
   * 'staleMatchRunError', 'testName', 'measuresProcessingOrchestrationFailed',
   * 'measuresProcessingOrchestrationFailedV2',
   * 'offlineGraphIngestionOrchestrationFailed',
   * 'segmentEvaluationOrchestrationFailed', 'matchMergeOrchestrationFailed',
   * 'refreshMatchPairsEntityDoesNotExist',
   * 'invalidSegmentDefinitionErrorMessage', 'clauseForNextRefresh',
   * 'refreshIntelligenceCancelled', 'refreshIntelligenceCompleted',
   * 'refreshIntelligenceFailed', 'refreshIntelligenceSkipped',
   * 'refreshIntelligenceDisabled', 'refreshConflationConfigurationNotFound',
   * 'conflationPlanInvalid', 'conflationMetadataNotFoundForEntity',
   * 'conflationMetadataNotFoundForColumn', 'conflationConfigurationInvalid',
   * 'conflationUnexpectedError', 'matchPairsEntityDataMissing',
   * 'matchPairsEntityNotExist', 'conflationResolutionInvalid',
   * 'intelligenceUnsupportedDiscoverySource',
   * 'refreshDataPreparationCancelled',
   * 'refreshDataPreparationRequestThrottling', 'refreshDataPreparationFailed',
   * 'bapNotMapped', 'bapCannotCreateEnvironment',
   * 'bapInvalidEnvironmentDisplayNameLength',
   * 'bapInvalidEnvironmentDisplayName', 'bapInvalidEnvironmentLocation',
   * 'bapInvalidEnvironmentSku', 'bapInvalidEnvironment',
   * 'bapInvalidTenantEnvironmentLimit', 'bapInvalidUserEnvironmentLimit',
   * 'dataSourceIngestionCancelled', 'dataSourceIngestionSkippedNoEntities',
   * 'genericPredictionEntitiesNotAvailable',
   * 'genericPredictionEntityPartitionsNotAvailable',
   * 'genericPredictionEntityWithLabelAttributeNotAvailable',
   * 'genericPredictionAttributesNotAvailable',
   * 'invalidJarvisEntityCreationErrorMessage',
   * 'activityIngestionActivityIdNotFound',
   * 'activityIngestionActivityTimeNotFound',
   * 'activityIngestionIncorrectMinViewFields',
   * 'activityIngestionNoJarvisColumnMapping', 'activityIngestionNoPrimaryKey',
   * 'activityIngestionNoSourceStream',
   * 'activityIngestionNoSourceStreamWithCorrectActivityName',
   * 'activityIngestionNoStartOrEndTime',
   * 'activityIngestionRangeIndexNotFound',
   * 'activityIngestionUniqueSourceStream', 'entityNoPrimaryKey',
   * 'invalidSegmentAdvancedSegCreateInInvalidState', 'invalidSegmentFormat',
   * 'invalidSegmentNameExists', 'inavlidSegmentType',
   * 'inavlidSegmentValidationDisabled', 'invalidSegmentNameConflict',
   * 'invalidSegmentNoExistingSegWithName', 'invalidSegmentSegNotFound',
   * 'invalidSegmentValidationNotAllowedForState',
   * 'invalidSegmentValidationNotAllowedForType', 'segmentNotFound',
   * 'dataSourceEmptyResourceIdError', 'invalidOrganizationUrl',
   * 'enablingCdsEntitiesFailed',
   * 'dataSourceIngestionSkippedForMissingCdsModelJsonPath',
   * 'dataSourceIngestionSkippedForCdsModelIncomplete',
   * 'missingOrganizationUrl', 'searchStoreUnavailable',
   * 'profileStoreUnavailable', 'unsupportedInsightType',
   * 'invalidInsightInputGeneric', 'invalidMalformedInsightInputPayload',
   * 'invalidInsightInputMissingName'
   * @property {array} [errorDescription.args]
   * @property {object} [sqlValidationStats]
   * @property {date} [sqlValidationStats.validationDate] Date of Validation
   * evaluation
   * @property {string} [sqlValidationStats.error] Gets the number of
   * consecutive failures
   * @property {array} [evaluationHistory] Evaluation history for the measure.
   * (not persisted in store)
   * @property {array} [outputHistory] Output history for the measure. (not
   * persisted in store)
   * @property {boolean} [isTemplate] Check if measure metadata is a template
   * @property {uuid} [templateId] Gets the template ID for templates
   * @property {boolean} [isCreatedFromTemplate] Check if measure metadata is
   * created from a template. Default value: false .
   * @property {number} [version] Version number of this object.
   * @property {string} [updatedBy] UPN of the user who last updated this
   * record.
   * @property {date} [updatedUtc] Time this object was last updated.
   * @property {string} [createdBy] Email address of the user who created this
   * record.
   * @property {date} [createdUtc] Time this object was initially created.
   * @property {uuid} [instanceId] Customer Insights instance id associated
   * with this object.
   */
  constructor() {
  }

  /**
   * Defines the metadata of MeasureMetadata
   *
   * @returns {object} metadata of MeasureMetadata
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'MeasureMetadata',
      type: {
        name: 'Composite',
        className: 'MeasureMetadata',
        modelProperties: {
          displayName: {
            required: false,
            serializedName: 'displayName',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          description: {
            required: false,
            serializedName: 'description',
            type: {
              name: 'String'
            }
          },
          definition: {
            required: false,
            serializedName: 'definition',
            type: {
              name: 'Composite',
              className: 'MeasureDefinition'
            }
          },
          latestEvaluation: {
            required: false,
            serializedName: 'latestEvaluation',
            type: {
              name: 'Composite',
              className: 'Evaluation'
            }
          },
          output: {
            required: false,
            serializedName: 'output',
            type: {
              name: 'Composite',
              className: 'ScalarOutput'
            }
          },
          evaluationStats: {
            required: false,
            serializedName: 'evaluationStats',
            type: {
              name: 'Composite',
              className: 'EvaluationStats'
            }
          },
          errorDescription: {
            required: false,
            serializedName: 'errorDescription',
            type: {
              name: 'Composite',
              className: 'StringInfo'
            }
          },
          sqlValidationStats: {
            required: false,
            serializedName: 'sqlValidationStats',
            type: {
              name: 'Composite',
              className: 'SqlValidationStats'
            }
          },
          evaluationHistory: {
            required: false,
            serializedName: 'evaluationHistory',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'EvaluationElementType',
                  type: {
                    name: 'Composite',
                    className: 'Evaluation'
                  }
              }
            }
          },
          outputHistory: {
            required: false,
            serializedName: 'outputHistory',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ScalarOutputElementType',
                  type: {
                    name: 'Composite',
                    className: 'ScalarOutput'
                  }
              }
            }
          },
          isTemplate: {
            required: false,
            serializedName: 'isTemplate',
            type: {
              name: 'Boolean'
            }
          },
          templateId: {
            required: false,
            serializedName: 'templateId',
            type: {
              name: 'String'
            }
          },
          isCreatedFromTemplate: {
            required: false,
            serializedName: 'isCreatedFromTemplate',
            defaultValue: false,
            type: {
              name: 'Boolean'
            }
          },
          version: {
            required: false,
            serializedName: 'version',
            type: {
              name: 'Number'
            }
          },
          updatedBy: {
            required: false,
            serializedName: 'updatedBy',
            type: {
              name: 'String'
            }
          },
          updatedUtc: {
            required: false,
            serializedName: 'updatedUtc',
            type: {
              name: 'DateTime'
            }
          },
          createdBy: {
            required: false,
            serializedName: 'createdBy',
            type: {
              name: 'String'
            }
          },
          createdUtc: {
            required: false,
            serializedName: 'createdUtc',
            type: {
              name: 'DateTime'
            }
          },
          instanceId: {
            required: false,
            serializedName: 'instanceId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = MeasureMetadata;
