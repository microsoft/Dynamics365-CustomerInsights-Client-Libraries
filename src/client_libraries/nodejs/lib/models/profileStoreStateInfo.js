/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents runtime profile store state
 *
 */
class ProfileStoreStateInfo {
  /**
   * Create a ProfileStoreStateInfo.
   * @property {date} [ingestionTime] Gets the latest date of ingestion.
   * @property {object} [primaryInfo]
   * @property {string} [primaryInfo.currentState] Possible values include:
   * 'empty', 'inBuild', 'queryable'
   * @property {number} [primaryInfo.rowCount] Gets the row count of customer
   * file yielded from merge output.
   * @property {number} [primaryInfo.size] Gets the size of customer file
   * yielded from merge .
   * @property {boolean} [primaryInfo.activityStoreRunSuccessful] Gets the flag
   * that tells if the Activity Store Job has run successfully.
   * @property {object} [primaryInfo.profileStoreHydrationStateInfo] Gets the
   * state of profile store hydration per job type.
   * @property {object} [secondaryInfo]
   * @property {string} [secondaryInfo.currentState] Possible values include:
   * 'empty', 'inBuild', 'queryable'
   * @property {number} [secondaryInfo.rowCount] Gets the row count of customer
   * file yielded from merge output.
   * @property {number} [secondaryInfo.size] Gets the size of customer file
   * yielded from merge .
   * @property {boolean} [secondaryInfo.activityStoreRunSuccessful] Gets the
   * flag that tells if the Activity Store Job has run successfully.
   * @property {object} [secondaryInfo.profileStoreHydrationStateInfo] Gets the
   * state of profile store hydration per job type.
   * @property {uuid} [instanceId] Customer Insights instance id associated
   * with this object.
   */
  constructor() {
  }

  /**
   * Defines the metadata of ProfileStoreStateInfo
   *
   * @returns {object} metadata of ProfileStoreStateInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'ProfileStoreStateInfo',
      type: {
        name: 'Composite',
        className: 'ProfileStoreStateInfo',
        modelProperties: {
          ingestionTime: {
            required: false,
            serializedName: 'ingestionTime',
            type: {
              name: 'DateTime'
            }
          },
          primaryInfo: {
            required: false,
            serializedName: 'primaryInfo',
            type: {
              name: 'Composite',
              className: 'ProfileStoreCollectionInfo'
            }
          },
          secondaryInfo: {
            required: false,
            serializedName: 'secondaryInfo',
            type: {
              name: 'Composite',
              className: 'ProfileStoreCollectionInfo'
            }
          },
          instanceId: {
            required: false,
            serializedName: 'instanceId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = ProfileStoreStateInfo;
