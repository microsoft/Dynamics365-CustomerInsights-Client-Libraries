/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents the entity info used in API requests (entity level)
 *
 */
class DatasourceEntityInformation {
  /**
   * Create a DatasourceEntityInformation.
   * @property {string} [entityName] Name of the entity.
   * @property {string} [primaryKey] Primary key name of the entity. We require
   * the entity to have a single column primary key column
   * @property {string} [entityType] Possible values include: 'unspecified',
   * 'profile', 'conflationMap', 'activity', 'aggregateKpi', 'profileKpi',
   * 'unifiedActivity', 'segment', 'intelligence', 'genericPrediction',
   * 'enrichment', 'insights', 'derivedEntity', 'corrupt', 'selfConflation',
   * 'conflationManualReview', 'selfConflationManualReview',
   * 'semanticActivity', 'segmentMembership', 'hierarchy', 'dataLineage',
   * 'transform', 'semanticEntity'
   * @property {string} [timestampFieldName] Time stamp field name.
   * @property {array} [semanticLabels] Semantic labels by attribute name.
   * @property {object} [entityEnrichmentInfo]
   * @property {boolean} [entityEnrichmentInfo.hasEnrichedEntity] Gets a value
   * indicating whether there is an enriched entity for the ds entity.
   * @property {string} [entityEnrichmentInfo.enrichedEntityName] Name of the
   * enriched entity.
   * @property {array} [entityEnrichmentInfo.configuredEnrichments] Gets the
   * list configured enrichments on the ds entity.
   * @property {number} [deltaTableVersion] Gets theDeltaTable version of this
   * entity.
   * @property {boolean} [autoGenerateCDMDefinition] Specifies if CDM
   * definition for this entity should be auto generated.
   */
  constructor() {
  }

  /**
   * Defines the metadata of DatasourceEntityInformation
   *
   * @returns {object} metadata of DatasourceEntityInformation
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatasourceEntityInformation',
      type: {
        name: 'Composite',
        className: 'DatasourceEntityInformation',
        modelProperties: {
          entityName: {
            required: false,
            serializedName: 'entityName',
            type: {
              name: 'String'
            }
          },
          primaryKey: {
            required: false,
            serializedName: 'primaryKey',
            type: {
              name: 'String'
            }
          },
          entityType: {
            required: false,
            serializedName: 'entityType',
            type: {
              name: 'String'
            }
          },
          timestampFieldName: {
            required: false,
            serializedName: 'timestampFieldName',
            type: {
              name: 'String'
            }
          },
          semanticLabels: {
            required: false,
            serializedName: 'semanticLabels',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'AttributeSemanticInformationElementType',
                  type: {
                    name: 'Composite',
                    className: 'AttributeSemanticInformation'
                  }
              }
            }
          },
          entityEnrichmentInfo: {
            required: false,
            serializedName: 'entityEnrichmentInfo',
            type: {
              name: 'Composite',
              className: 'EntityEnrichmentInformation'
            }
          },
          deltaTableVersion: {
            required: false,
            serializedName: 'deltaTableVersion',
            type: {
              name: 'Number'
            }
          },
          autoGenerateCDMDefinition: {
            required: false,
            serializedName: 'autoGenerateCDMDefinition',
            type: {
              name: 'Boolean'
            }
          }
        }
      }
    };
  }
}

module.exports = DatasourceEntityInformation;
