/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represents a User
 *
 */
class UserInfo {
  /**
   * Create a UserInfo.
   * @property {uuid} [userId] Gets the unique ID for this user.
   * @property {string} [upn] Gets user identifier.
   * @property {array} [instancesIds] Gets list of Instances Id.
   * @property {string} [preferredLanguage] Gets user preferred language.
   * @property {string} [preferredRegionalFormat] Gets user preferred regional
   * format.
   * @property {uuid} [defaultInstance] Gets user default instance id.
   * @property {object} [userNotificationsSettings]
   * @property {array} [userNotificationsSettings.dismissedBannerNotifications]
   * Gets the list of dismissed banner notifications for this user.
   * @property {uuid} [industryDemo] Gets the industry demo selected by user
   * during trial
   * @property {uuid} [tenantId] Gets the tenant id of the user.
   * @property {boolean} [hasSeenWelcome] Gets a value indicating whether the
   * user has seen the all apps (welcome) page.
   * @property {date} [createdUtc] Gets the created time of User settings
   * created for EI Migration.
   * @property {boolean} [allowEmailContacts] Gets a value indicating whether
   * the user Opt-In to be contacted through emails. This is for CPM
   * integration from EI.
   * @property {object} [portalSettings]
   * @property {object} [portalSettings.coachmarks]
   * @property {object} [portalSettings.coachmarks.history]
   * @property {string} [portalSettings.coachmarks.history.id] Gets history id.
   * @property {boolean} [portalSettings.coachmarks.history.viewed] Checks for
   * already visited.
   * @property {object} [portalSettings.banners]
   * @property {object} [portalSettings.banners.history]
   * @property {string} [portalSettings.banners.history.id] Gets history id.
   * @property {boolean} [portalSettings.banners.history.viewed] Checks for
   * already visited.
   * @property {object} [portalSettings.notifications]
   * @property {object} [portalSettings.notifications.history]
   * @property {string} [portalSettings.notifications.history.id] Gets history
   * id.
   * @property {boolean} [portalSettings.notifications.history.viewed] Checks
   * for already visited.
   * @property {boolean} [portalSettings.isExistingUser] Gets a value
   * indicating whether the user has seen the all apps (welcome) page.
   * @property {boolean} [portalSettings.showDefaultHomePage] Gets a value
   * indicating whether the user has seen the all apps (welcome) page.
   * @property {boolean} [portalSettings.proTagger] Gets a value indicating
   * whether the user has seen the all apps (welcome) page.
   * @property {object} [termsOfUse]
   * @property {string} [termsOfUse.state] Possible values include: 'none',
   * 'accepted', 'declined'
   * @property {string} [termsOfUse.version] Gets the current version of this
   * document.
   * @property {date} [termsOfUse.createdUtc] Gets the created time of terms
   * acceptance.
   * @property {string} [region] Gets the region that the user belongs to.
   * @property {string} [lastUsedExperience] Possible values include:
   * 'audienceInsights', 'engagementInsights', 'audienceInsightsB2B'
   * @property {uuid} [instanceId] Customer Insights instance id associated
   * with this object.
   */
  constructor() {
  }

  /**
   * Defines the metadata of UserInfo
   *
   * @returns {object} metadata of UserInfo
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'UserInfo',
      type: {
        name: 'Composite',
        className: 'UserInfo',
        modelProperties: {
          userId: {
            required: false,
            serializedName: 'userId',
            type: {
              name: 'String'
            }
          },
          upn: {
            required: false,
            serializedName: 'upn',
            type: {
              name: 'String'
            }
          },
          instancesIds: {
            required: false,
            serializedName: 'instancesIds',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'InstanceInfoElementType',
                  type: {
                    name: 'Composite',
                    className: 'InstanceInfo'
                  }
              }
            }
          },
          preferredLanguage: {
            required: false,
            serializedName: 'preferredLanguage',
            type: {
              name: 'String'
            }
          },
          preferredRegionalFormat: {
            required: false,
            serializedName: 'preferredRegionalFormat',
            type: {
              name: 'String'
            }
          },
          defaultInstance: {
            required: false,
            serializedName: 'defaultInstance',
            type: {
              name: 'String'
            }
          },
          userNotificationsSettings: {
            required: false,
            serializedName: 'userNotificationsSettings',
            type: {
              name: 'Composite',
              className: 'UserNotificationsSettings'
            }
          },
          industryDemo: {
            required: false,
            serializedName: 'industryDemo',
            type: {
              name: 'String'
            }
          },
          tenantId: {
            required: false,
            serializedName: 'tenantId',
            type: {
              name: 'String'
            }
          },
          hasSeenWelcome: {
            required: false,
            nullable: true,
            serializedName: 'hasSeenWelcome',
            type: {
              name: 'Boolean'
            }
          },
          createdUtc: {
            required: false,
            serializedName: 'createdUtc',
            type: {
              name: 'DateTime'
            }
          },
          allowEmailContacts: {
            required: false,
            nullable: true,
            serializedName: 'allowEmailContacts',
            type: {
              name: 'Boolean'
            }
          },
          portalSettings: {
            required: false,
            serializedName: 'portalSettings',
            type: {
              name: 'Composite',
              className: 'PortalSettings'
            }
          },
          termsOfUse: {
            required: false,
            serializedName: 'termsOfUse',
            type: {
              name: 'Composite',
              className: 'TermsOfUse'
            }
          },
          region: {
            required: false,
            serializedName: 'region',
            type: {
              name: 'String'
            }
          },
          lastUsedExperience: {
            required: false,
            serializedName: 'lastUsedExperience',
            type: {
              name: 'String'
            }
          },
          instanceId: {
            required: false,
            serializedName: 'instanceId',
            type: {
              name: 'String'
            }
          }
        }
      }
    };
  }
}

module.exports = UserInfo;
