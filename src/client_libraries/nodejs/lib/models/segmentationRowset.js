/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

/**
 * Represent a Row set.
 *
 */
class SegmentationRowset {
  /**
   * Create a SegmentationRowset.
   * @property {string} [rowsetOperation] Possible values include: 'union',
   * 'intersect', 'except', 'none'
   * @property {object} [criteria]
   * @property {string} [criteria.kind] Possible values include: 'default',
   * 'engagement'
   * @property {string} [criteria.logicalOperator] Possible values include:
   * 'and', 'or'
   * @property {string} [criteria.attribute] Gets the Attribute of the entity
   * used in segment criteria.
   * @property {string} [criteria.comparisonOperator] Possible values include:
   * 'equals', 'notEquals', 'greaterThan', 'greaterThanOrEqualTo', 'lessThan',
   * 'lessThanOrEqualTo', 'any', 'contains', 'startsWith', 'endsWith',
   * 'isNull', 'isNotNull', 'all', 'isIn', 'isWithinLast', 'isBetween',
   * 'isNotBetween', 'yearToDate', 'dayOf', 'monthOf', 'yearOf', 'dayOfWeek',
   * 'timeAt'
   * @property {array} [criteria.childCriterias] Gets the list of Child
   * criteria of segment.
   * @property {string} [criteria.value] Gets the Value in criteria.
   * @property {boolean} [criteria.ignoreCase] Gets a value indicating whether
   * case is ignored for this criteria.
   * @property {array} [criteria.listOfValues] Gets the list of values in
   * criteria.
   * @property {boolean} [criteria.isTime] flag set to true if entries are of
   * time format
   * @property {array} [paths] Gets the relationship path to use for segment
   * criteria.
   */
  constructor() {
  }

  /**
   * Defines the metadata of SegmentationRowset
   *
   * @returns {object} metadata of SegmentationRowset
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'SegmentationRowset',
      type: {
        name: 'Composite',
        className: 'SegmentationRowset',
        modelProperties: {
          rowsetOperation: {
            required: false,
            serializedName: 'rowsetOperation',
            type: {
              name: 'String'
            }
          },
          criteria: {
            required: false,
            serializedName: 'criteria',
            type: {
              name: 'Composite',
              className: 'SegmentMembershipCriteria'
            }
          },
          paths: {
            required: false,
            serializedName: 'paths',
            type: {
              name: 'Sequence',
              element: {
                  required: false,
                  serializedName: 'ArrayElementType',
                  type: {
                    name: 'Sequence',
                    element: {
                        required: false,
                        serializedName: 'StringElementType',
                        type: {
                          name: 'String'
                        }
                    }
                  }
              }
            }
          }
        }
      }
    };
  }
}

module.exports = SegmentationRowset;
